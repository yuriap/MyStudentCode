Свойство Active.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: property Active: Boolean;
Описание.
Установите свойство Active в True, чтобы  открыть базу данных и поместить 
ее в состояние Browse. Установите Active в False, чтобы закрыть базу данных и 
поместить ее в состояние Inactive. Изменение свойства Active эквивалентно 
вызову метода Close или Open. Для TQuery и TStoredProc, если выражение SQL 
или сохраненная procedure не возвращает результата, то установление Active в 
True будет поднимать исключение потому что Delphi ожидает  получить курсор.
Обратите внимание: Post не  вызывается неявно при установке Active в False. 
Используйте событие BeforeClose, чтобы явно отправить по почте любой  
результат редактирования.
Свойство AutoCalcFields.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: property AutoCalcFields: Boolean;
Описание.
 Свойство AutoCalcFields решает когда вызывается OnCalcFields.
OnCalcFields - вызывается всякий раз, когда приложение восстанавливает запись 
из базы данных. Если AutoCalcFields - True, тогда OnCalcFields -  вызывается 
также всякий раз, когда поле в базе данных редактируется.
Если AutoCalcFields - True, OnCalcFields не должен исполнять какие-либо 
действия, которые могут изменить базу данных (или связывать базы данных если 
они - часть отношения master-detail), потому что это может привести к рекурсии. 
Например, если OnCalcFields исполняет Post, и AutoCalcFields - True, тогда 
OnCalcFields будет  вызываться снова, что приведет к другому вызову Post, и так 
далее.
Свойство BOF.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: property BOF: Boolean;
Описание.
Использовать во время выполнения и только для чтения. BOF - Boolean 
свойство которое указывает находится ли база данных на первой записи. 
 Свойство BOF возвращает значение True в том случае если:
- Приложение впервые открывает таблицу.
- Вызван  метод First таблицы.
- Вызван и неудачно выполнен метод Prior таблицы.
Свойство CanModify.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: property CanModify: Boolean;
Описание.
Использовать во время выполнения и только для чтения. CanModify 
определяет может ли приложение изменить данные в базе данных. Когда 
CanModify - False, тогда база данных только читает и не может быть помещена в 
состояние Insert или Edit. Когда CanModify - True, база данных может перейти в 
состояние Insert или Edit. Даже если CanModify - True, это не гарантирует того что 
пользователь будет иметь возможность вставить или модернизировать записи в 
таблице. Кроме того существуют другие факторы, которые могут повлиять на 
доступность БД, например, привилегии доступа в SQL.
TTable имеет свойство ReadOnly которое запрашивает привилегии записи, 
когда установлено в False. Когда ReadOnly - True, CanModify будет автоматически 
установлено в  False. Когда ReadOnly - False, CanModify будет True, если база 
данных позволяет читать и писать привилегии для базы данных и основной 
таблицы.
Свойство Database.
Применяется в TTable, TQuery компонентах.
Синтаксис: property Database: TDatabase;
Описание.
Использовать во время выполнения и только для чтения. Database 
определяет TDatabase компонент, связанный с компонентом базы данных TTable. 
Если Вы не создавали TDatabase во время проектирования, то Delphi будет 
создавать эго во время исполнения. Используйте свойство Database, чтобы 
сослаться на свойства и методы компонента TDatabase.
Свойство DatabaseName.
Применяется в TTable, TQuery, TStoredProc компонент.
Синтаксис: property DatabaseName: TFileName;
Описание.
Установите свойство DatabaseName, чтобы определить базу данных для 
доступа. Это свойство может определяться:
- BDE псевдонимом.
- Путем к директории файлов базы данных.
- Путем к директории и имени файла  базы данных Local InterBase Server.
- Определенным в приложении псевдоним указанный в TDatabase         
компоненте.
Обратите внимание: Используйте метод Close, который помещает базу 
данных в состояние Inactive перед  тем как изменить DatabaseName.
Свойство DBHandle.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: property DBHandle: HDBIDB;
Описание.
Использовать во время выполнения и только для чтения. Свойство DBHandle
позволяет приложению делать прямой  вызов Borland Database Engine (BDE) API. 
Большое количество функций BDE вызывается через обработчик базы данных. 
Чаще всего это свойство не используется, если ваше приложение не требует 
некоторых функциональных возможностей не инкапсулированных в VCL.
Свойство DBLocale.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: property DBLocale: TLocale;
Описание.
Использовать во время выполнения и только для чтения. Свойство DBLocale
позволяет делать прямой  вызов Borland Database Engine использующей ту же 
спецификацию драйвера языка. Чаще всего это свойство не используется если 
ваше приложение не требует некоторых функциональных возможностей не 
инкапсулированных в VCL.
Свойство EOF.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: property: EOF: Boolean;
Описание.
Использовать во время выполнения и только для чтения. EOF - Boolean 
свойство, которое указывает достигнута ли в базе данных последняя запись. 
 Свойство EOF возвращает значение True после того как:
- Приложение  открывает пустую базу данных.
- Вызывается метод Last таблицы.
- Неудачно вызывается метод Next таблицы, потому что курсор находится на 
последней записи.
Свойство Exclusive.
Применяется в компоненте TTable.
Синтаксис: property Exclusive: Boolean;
Описание.
Установите свойство Exclusive в True, чтобы предотвратить обращение 
любого другого пользователя к таблице. Если другие пользователи работают с 
таблицей, которую Вы пытаетесь открыть, ваш обработчик исключительных 
систуаций должен ожидать тех пользователей, пока они не закончат. Если Вы не 
имеете обработчика такой исключительной ситуации и другой пользователь уже 
работает с таблицей (т. е. она открыта), ваше приложение будет завершено.
Обратите внимание: Установите свойство Active в False перед  изменением 
свойства Exclusive, чтобы предотвратить исключительную ситуацию.
Не устанавливайте Active и Exclusive в True в Окне Инспектора Объектов. 
Так как Инспектор Объектов будет одновременно иметь таблицу открытой и 
будет предотвращать попытки вашей программы открыть ту же таблицу. 
Установка Exclusive в True возможна только тогда, когда Вы имеете полный 
контроль над таблицей.
Свойство FieldCount.
Применяется в TDBGrid, TDBLookupList, TQuery, TStoredProc, TTable, 
компонентах.
Синтаксис: property FieldCount: Integer;
Описание.
Использовать во время выполнения и только для чтения. Cвойство 
FieldCount определяет число полей в базе данных. Значение этого свойства может 
не совпадать с числом полей в основной таблице базы данных, так как Вы можете  
добавлять расчетные поля и устранять поля с помощью Fields Designer.
Для сетки данных  TDBGrid и коробки списка поиска базы данных 
TDBLookupListBox, значение свойства FieldCount соответствует числу полей в 
базе данных показанных в сетке TDBGrid.
Свойство FieldDefs.
Применяется  в TTable, TQuery, TStoredProc компонентах.
Синтаксис: property FieldDefs: TFieldDefs;
Описание.
Использовать только во время выполнения. Свойство FieldDefs содержит
информацию о каждом TFieldDef в базе данных. Вы можете использовать это 
свойство, чтобы определить какие поля находятся в базе данных, их имена, типы и 
размеры.
Свойство Fields.
Применяется в TDBGrid, TDBLookupList, TQuery, TStoredProc и TTable 
компонентах.
Синтаксис: property Fields [ Index: Integer ]: TField;
Описание.
Использовать во время выполнения и только для чтения. Свойство Fields
возвращает некоторое поле из базе данных, которое определяется через параметр 
Index, первое поле в базе данных имеет значение Index равное 0.
Свойство Handle.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: property Handle: HDBICur;
Описание.
Использовать во время выполнения и только для чтения. Свойство Handle
позволяет приложению делать прямой  вызов Borland Database Engine API 
который используюется компонентом базы данных. Чаще всего это свойство не 
используется если ваше приложение не требует некоторых функциональных 
возможностей не инкапсулированных в VCL.
Свойство IndexDefs.
Применяется в компоненте TTable.
Синтаксис: property IndexDefs: TIndexDefs;
Описание.
Использовать во время выполнения и только для чтения. Cвойство IndexDefs 
содержит информацию о всех индексах таблицы TTable.
Обратите внимание: Свойство IndexDefs не всегда имеет возможность
отразить текущее множество индексов. Перед исследованием свойства IndexDefs,  
вызовите метод Update, чтобы гарантировать, что Вы имеете наиболее свежую 
информацию.
Свойство IndexFieldCount.
Применяется в компоненте TTable.
Синтаксис: property IndexFieldCount: Integer;
Описание.
Использовать только во время выполнения. Свойство IndexFieldCount -
число фактических полей для текущего индекса. Если Вы используете первичный 
индекс для компонента, то значение будет равно 1. Если компонент не состоянии 
Active, то значение IndexFieldCount будет равно нулю.
Свойство IndexFieldNames.
Применяется в компоненте TTable.
Синтаксис: property IndexFieldNames: string;
Описание.
 Свойство IndexFieldNames используется с сервером SQL, чтобы
идентифицировать колонки, которые нужно использовать как индекс для TTable.  
Отделите имена колонок символами полудвоеточия ( ";" ). Если Вы имеете 
слишком большое количество имен колонок или имена слишком длинные в 
пределах 255 символа, то используются номера колонок вместо их имен.
Обратите внимание: Свойства IndexFieldNames и IndexName взаимно 
исключительны. Установка одного будет очищать другое.
Свойство IndexName.
Применяется в компоненте TTable.
Синтаксис: property IndexName: string;
Описание.
 Свойство IndexName  опознает вторичный индекс для TTable. Если для
IndexName не назначено какое-либо значение, то для упорядочивания записей 
будет использоваться первичный индекс таблицы.
Для таблицы dBASE, индекс должен находиться в файле индекса таблицы. 
Файл индекса владельца определеяется свойством TableName, в котором 
заменяется расширение имени файла "DBF" на "MDX". Неизвестные индексы не 
поддерживаются.
Обратите внимание: Свойства IndexFieldNames и IndexName взаимно 
исключительны. Установка одного будет очищать другой.
Свойство IndexFields.
Применяется в компоненте TTable.
Синтаксис: property IndexFields [ Index: Integer ]: TField;
Описание.
Использовать только во время выполнения. Свойство IndexFields дает Вам
доступ к информации о каждом поле текущего индекса базы данных. Свойство
Active должно быть выключенно иначе информация не будет соответствовать 
действительности.
Свойство KeyExclusive.
Применяется в компоненте TTable.
Синтаксис: property KeyExclusive: Boolean;
Описание.
 Свойство KeyExclusive указывает будут ли исключаться из диапазона поиска
соответствующие записи указанные для функции поиска. KeyExclusive - False по 
умолчанию.
Для методов SetRangeStart и SetRangeEnd, KeyExclusive  решает исключает 
ли фильтр диапазона границы этого диапазона. Значение по умолчанию - False 
означает что записи будут в отфильтрованном диапазоне если они большие чем 
или равны указанному значению начала диапазона и меньше чем или равны 
указанному значению конца диапазон. Если KeyExclusive - True, методы будут 
фильтровать строго больше чем и строго меньше чем указанные для границ 
диапазона значения.
Для методов GoToNearest и FindNearest, KeyExclusive указывает будет ли 
курсор в результате поиска помещаться на или после записи которой ищут. Если 
KeyExclusive - False, тогда GoToNearest и FindNearest будет  перемещать курсор 
на запись, которая соответствует указанному значению, если она найдена. Если 
True, тогда методы будут устанавливать курсор на запись следующую 
непосредственно за искомой записью, если она найдена.
Свойство KeyFieldCount.
Применяет в компоненте TTable.
Синтаксис: property KeyFieldCount: Integer;
Описание.
 Свойство KeyFieldCount определяет число ключевых полей, которые
используются с функциями поиска ( GotoKey, FindKey, EditKey, и так далее ) если 
Вы не хотите искать на всех ключевых полях.
Свойство Locale.
Применяет в TTable, TQuery, TStoredProc компонентах.
Синтаксис: property Locale: TLocale;
Описание.
Использовать во время выполнения и только для чтения. Свойство Locale
определяет драйвер языка используемый с базой данных при прямом  вызове 
Borland Database Engine API. Чаще всего Вы не должны использовать это 
свойство, если ваше приложение не требует некоторых функциональных 
возможностей не инкапсулированных в VCL.
Свойство MasterFields.
Применяется в компоненте TTable.
Синтаксис: property MasterFields: string;
Описание.
Используйте свойство MasterFields, чтобы определить колонку(и), чтобы  
связать таблицу-детализацию с таблицей-мастером, которая определена в 
свойстве MasterSource. MasterFields - это строка состоящая из одного или более 
имен полей которые  связывают две таблицы.  Отделите имена полей точкой с 
запятой. Каждый раз когда измененяется текущая запись в таблице-мастере, 
новые значения этих полей используются для того, чтобы выбрать  
соответствующие записи из таблицы-детализации для показа. Во время 
проектирования, используйте Field Link Designer, чтобы установить это свойство.
Свойство MasterSource.
Применяется в компоненте TTable.
Синтаксис: property MasterSource: TDataSource;
Описание.
При соединении таблица-детализации с таблицей-мастером, используйте 
свойство MasterSource, чтобы определить TDataSource от которого TTable будет  
получать данные для таблицы-мастера.
Свойство Modified.
Применяет в TTable, TQuery, TStoredProc компонентах.
Синтаксис: property Modified: Boolean;
Описание.
Использовать во время выполнения и только для чтения. Свойство Modified -
True если поле в текущей записи было изменено. Оно переустанавливается в False
когда запись обновлена посредством  вызова Cancel или Post методов.
Свойство Name.
Применяется ко всем компонентам.
Синтаксис: property Name: TComponentName;
Описание.
 Свойство Name содержит имя компонента в том виде в каком на него будут
ссылаться другие компоненты. По умолчанию, Delphi назначает
последовательные имена основанные на типе компонента, типа " Button1 ", "
Button2 ", и так далее, Вы можете изменять их, чтобы удовлетворить ваши
потребности.
Обратите внимание: Изменять имя компонента допустимо только во время
проектирования.
Свойство Owner.
Применяется ко всем компонентам.
Синтаксис: property Owner: TComponent;
Описание.
Использовать во время выполнения и только для чтения. Свойство Owner
указывает который компонент владеет данным компонентом. Форма владеет 
всеми компонентами, которые находятся в ней. В свою очередь, форма 
принадлежит приложению. Когда один компонент принадлежит другому, память 
для владеть компонента освобождена, когда память владельца освобождена. Это 
означает что, когда форма разрушена, то и все компоненты в форме разрушены 
также. Наконец, когда память для приложения непосредственно освобождена, 
память для формы (и для всех компонентов, включенных в нее) также 
освобождена.
Не путайте владельца компонента с родителями компонента. Родитель - 
управляющее окно, которое содержит окно ребенка. Родитель и владелец 
компонента управляющего окна могут быть различными компонентами.
Свойство ReadOnly.
Применяется к компоненту TTable.
Синтаксис: property ReadOnly: Boolean;
Описание.
Используйте свойство ReadOnly, чтобы предотвратить измение данных в 
таблице пользователем.
Обратите внимание: Установите свойство Active в False перед  измением 
свойства ReadOnly.
Свойство RecordCount
Применяет в TTable, TQuery, TStoredProc компонентах
Синтаксис: property RecordCount: Longint;
Описание.
Использовать во время выполнения и только для чтения. Свойство
RecordCount определяет число записей в базе данных. Число сообщенных записей 
может зависеть от сервера и от того находится ли ограничение диапазона в 
действии.
Свойство State.
Применяет в TTable, TQuery, TStoredProc компонентах.
Синтаксис: property State: TDataSetState;
Описание.
Использовать во время выполнения и только для чтения. Свойство State
определяет текущее состояние базы данных. Возможные значения - типа 
TDataSetState:
- dsInactive когда база данных - закрыта
- dsBrowse когда база данных находится в состоянии Browse.
- dsEdit когда база данных находится в состоянии Edit.
- dsInsert когда база данных находится в состоянии Insert.
- dsSetKey когда база данных находится в состоянии SetKey.
- CalcFields когда вызвано событие OnCalcFields.
Свойство TableName.
Применяется в компонентах TTable.
Синтаксис: property TableName: TFileName;
Описание.
 Свойство TableName - имя таблицы базы данных, с которой связан
компонент TTable.
Обратите внимание: TTable должен быть закрыт, чтобы  изменять это 
свойство.
Свойство TableType.
Применяется в компоненте TTable.
Синтаксис: property TableType: TTableType
Описание.
 Свойство TableType определяет тип основной таблицы базы данных. Это
свойство не используется для таблицы SQL. Если TableType - установлено по 
умолчанию, расширение имени файла таблицы определяет тип таблицы:
- Расширение .DB или без расширения имени файла: таблица Paradox.
- Расширение .DBF: таблица dBASE.
- Расширение .TXT: ASCII таблица.
Если значение TableType установлено не по умолчанию, тогда таблица будет 
всегда иметь указанный TableType, независимо от расширения имени файла:
- ttASCII: файл Текста.
- ttDBase: таблица dBASE.
- ttParadox: таблица Paradox.
Обратите внимание: TTable должен быть закрыт, чтобы  изменять это 
свойство.
Свойство Tag.
Применяется ко всем компонентам.
Синтаксис: property Tag: Longint;
Описание.
 Свойство Tag доступно, чтобы хранить значение integer как часть
компонента. В то время как свойство Tag не имеет никакое значение в Delphi, 
ваше приложение может использовать свойство, чтобы хранить значение для 
специальных потребностей.
Свойство UpdateMode.
Применяется в TTable, TQuery компонентах (установит только живой 
результат).
Синтаксис: property UpdateMode;
Описание.
 Свойство UpdateMode решает как Delphi будет находить записи
обновляемые в базе данных SQL. Это свойство важно в многопользовательской 
среде когда пользователи могут обращаться к одним и тем же записям и делать 
противоречивое изменение в них. Когда пользователь отправляет по почте 
модернизацию, Delphi использует первоначальное значение в записи, чтобы найти 
запись в базе данных. Этот подход подобный оптимистической схеме захвата. 
UpdateMode определяет которые колонки Delphi использует, чтобы найти запись.
В терминах SQL, UpdateMode определяет какие колонки включены в пункт 
WHERE выражения UPDATE. Если Delphi не может найти запись с 
первоначально указанним значением в колонке (если другой пользователь  
изменял значение в базе данных), Delphi не будет делать модернизацию и будет 
производить исключение. Свойство UpdateMode может иметь следующие
значения:
- WhereAll ( по умолчанию ): Delphi использует каждую колонку, чтобы найти 
обновляемую запись. Это - наиболее ограничительный режим.
- WhereKeyOnly: Delphi использует только ключевые колонки, чтобы найти 
обновляемую запись. Это - наименее ограничительный режим и должен 
использоваться только если другие пользователи не будут  изменять 
обновляемые записи.
- WhereChanged: Delphi использует ключевые колонки и колонки которые 
изменились, чтобы найти обновляемую запись.
Метод AddIndex.
Применяется в компоненте TTable.
Синтаксис: procedure AddIndex (const Name, Fields: string; Options: 
TIndexOptions);
Описание.
 Метод AddIndex создает новый индекс для TTable. Name - имя нового
индекса. Fields - список полей, включонных в индекс.  Отделите имена полей 
двоеточием. Options - множество значений типа TIndexOptions.
Метод ApplyRange.
Применяется в компоненте TTable.
Синтаксис: procedure ApplyRange;
Описание.
 Метод ApplyRange используется для того, чтобы  применить начало и конец
диапазона, установленного в SetRangeStart и SetRangeEnd методах или 
EditRangeStart и EditRangeEnd методах. Таким образом образуется фильтр для 
записей таблицы базы данных, доступных для приложения.
Обратите внимание: При сравнении полей , ПУСТОЕ (NULL) поле - всегда 
меньше чем любое другое возможное значение.
Метод Append.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure Append;
Описание.
 Метод Append  перемещает курсор в конец базы данных, помещает базу
данных в состояние Insert, и добавляет новую, пустую запись. Когда приложение 
вызовет Post, новая запись будет вставлена в базу данных в позиции основанной 
на индексе, если тот определен. Чтобы отказаться от новой записи, используют 
метод Cancel.
Этот метод имеет силу только для баз данных которые возвращают живую 
информацию.
Обратите Внимание: Для индексированной таблицы, Append и Insert методы 
будут помещать новую запись в правильное местоположение в таблице, 
основанное на индексе таблицы. Если ни один индекс в таблице не определен, 
тогда - Append будет добавлять запись в конец таблицы, а Insert будет вставлять ее 
в текущей позиции курсора. В любом случае при отправлении по почте новая 
запись может  заставить другие записи, показанные в сетке данных,  измениться 
поскольку база данных  установит запись в позиции, соответствующей 
индексации, а также обновит отображение  данных в сетке данных.
Метод AppendRecord.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure AppendRecord (const Values: array of const);
Описание.
 Метод AppendRecord добавляет в конец базы данных новую запись, при
этом заполняя ее значениями полей предосталенными в параметре Values. 
Назначение элементов Values к полям записи происходит последовательно; 
первый элемент назначен первому полю, второй -- второму, и т.д. Число значений 
полей предоставленных в Values может не совпадать с числом фактических полей 
в записи; любые остающиеся поля оставлены ПУСТЫМИ (NULL). Тип каждого 
элемента Values должен быть совместим с типом поля, или его тип мог бы быть 
преобразован с помощью процедур AsString, AsInteger, и т.д.
Этот метод корректен только для баз данных, которые возвращают живую 
информацию.
Обратите внимание: Для индексированной таблицы, AppendRecord и 
InsertRecord методы будут помещать новую запись в правильное местоположение, 
основанное на индексе таблицы. Если ни один индекс в таблице не определен, 
тогда - AppendRecord будет  добавлять запись в конец таблицы, а InsertRecord 
будет вставлять ее в текущей позиции курсора. В любом случае при отправлении 
по почте новая запись может  заставить другие записи, показанные в сетке 
данных,  измениться, поскольку база данных  установит запись в позиции, 
соответствующей индексации, а также обновит отображение  данных в сетке 
данных.
Метод BatchMove.
Применяется в компоненте TTable.
Синтаксис: function BatchMove (Asource: TDataSet; Amode: TBatchMode): 
Longint;
Описание.
 Метод BatchMove копирует, добавляет в конец, модернизирует, или удаляет
записи в TTable. ASource - TTable связанная с таблицей базы данных содержащей 
исходные записи. AMode - режим копии; это может быть любой из элементов типа 
TBatchMode: batAppend, batUpdate, batAppendUpdate, batDelete, или batCopy.
BatchMove возвращает число обработанных записей.
Метод Cancel.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure Cancel;
Описание.
 Метод Cancel возвращает базу данных к состоянию Browse и отменяет любое
изменение в текущей записи.
Метод CancelRange.
Применяется в компоненте TTable.
Синтаксис: procedure CancelRange;
Описание.
 Метод CancelRange отменяет диапазон ограничения для TTable который был
предварительно установлен вызовами ApplyRange или SetRange методов.
Метод CheckBrowseMode.
Применяется в TTable, TQuery, TStoredProc компонентах
Синтаксис: procedure CheckBrowseMode;
Описание.
 Метод CheckBrowseMode проверяет открыта ли база данных и не ожидается
ли какое-нибудь изменение. Если свойство State базы данных - dsEdit, dsInsert или 
dsSetKey, вызывается метод Post, чтобы отправить по почте любое ожидаемое 
изменение. Если база данных - закрыта, то будет поднято исключение 
EDataBaseError.
Метод ClearFields.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure ClearFields;
Описание.
 Метод ClearFields очищает все поля текущей записи, приводя их к значению
по умолчанию (обычно это ПУСТО (NULL)), база данных должна быть в 
состоянии Edit или будет поднято исключение EDatabaseError.
Метод Close.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure Close;
Описание.
 Метод Close  закрывает базу данных, возвращающую ее в состояние Inactive.
Вызов Close эквивалентен установке свойства Active в False.
Обратите внимание: Метод Post не  вызывается методом Close. Используйте
событие BeforeClose, чтобы отправить по почте результат редактирования.
Метод CreateTable.
Применяется к компоненту TTable.
Синтаксис: procedure CreateTable;
Описание.
 Метод CreateTable создает новую пустую таблицу базы данных. Перед
вызовом этого метода, свойствам DatabaseName, TableName,  TableType, 
FieldDefs и IndexDefs должны быть назначенны значения.
Метод CursorPosChanged.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure CursorPosChanged;
Описание.
 Метод CursorPosChanged необходим лишь в том случае если Вы используете
свойство Handle для того, чтобы проводить прямой  вызов Borland Database 
Engine (BDE) API, оно заставляет измениться позиции курсора. Чтобы уведомить 
базу данных, позицию курсора в которой изменяла BDE,  вызывайте 
CursorPosChanged после прямого  вызова BDE.
Метод Delete.
Применяется в TTable, TQuery компонентах.
Синтаксис: procedure Delete;
Описание.
 Метод Delete удаляет текущую запись из базы данных. Следующая за
удаленной запись становится текущей записью. Если удаленная запись была 
последней записью в базе данных, то предыдущая запись становится текущей 
записью.
Этот метод сорректен только для баз данных которые возвращают живую 
информацию.
Метод DeleteIndex.
Применяется в компоненте TTable.
Синтаксис: procedure DeleteIndex (const Name: string);
Описание.
 Метод DeleteIndex удаляет вторичный индекс для TTable. Name - имя
индекса. Вы должны  открыть таблицу с исключительным доступом (свойство 
Exclusive = True ).
Метод DeleteTable.
Применяется в компоненте TTable.
Синтаксис: procedure DeleteTable;
Описание.
 Метод DeleteTable удаляет существующую таблицу базы данных. Перед
вызовом этого метода, свойствам DatabaseName, TableName и TableType должны 
быть назначенны значения. Таблица должна быть закрытой.
Метод DisableControls.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure DisableControls;
Описание.
 Метод DisableControls временно разьединяет базу данных со всеми
компонентами TDataSource. В то время как источники данных разьединены, 
связанные с данными компоненты отображения не будут показывать изменения в 
базе данных. Итерации по базе данных методами Next или Prior, с 
предшествующим вызовом DisableControls будет происходить быстрее, так как 
устраняется потребность каждый раз перерисовывать экран.
Используйте EnableControls, чтобы восстановить связь. Не зависимо от 
количества вызовов DisableControls и EnableControls, только последний вызов  
EnableControls фактически будет модернизировать источники данных.
Метод Edit.
Применяется в TTable, TQuery компонентах.
Синтаксис: procedure Edit;
Описание.
 Метод Edit  готовит текущую запись базы данных для изменения и помещает
базу данных в состояние Edit, установив свойство State dsEdit. Компоненты 
отображения данных (data control) не могут изменить существующие записи если 
база данных не находится в состоянии Edit. При вызове этого метода для базы 
данных, которая не может быть изменена, генерируется исключение. Свойство
CanModify равно True для баз данных, которые могут быть изменены. Этот метод 
корректен только для баз данных, которые возвращают живую информацию.
Метод EditKey.
Применяется  компоненте TTable.
Синтаксис: procedure EditKey;
Описание.
Используйте метод EditKey для того, чтобы изменить содержание буфера 
ключей поиска. Этот метод полезен только при поиске на многократных полях 
после вызова SetKey. Вызовите GotoKey, чтобы  переместить курсор на запись с  
соответствующим ключом. EditKey отличается от SetKey тем, что последний 
очищает все элементы буфера ключей поиска и приводит их к значению по 
умолчанию (NULL). EditKey оставляет элементы буфера ключей поиска без 
изменения с их текущим значением.
Метод EditRangeEnd.
Применяется в компоненте TTable.
Синтаксис: procedure EditRangeEnd;
Описание.
EditRangeEnd позволяет Вам изменить  начальное значение диапазона 
фильтра базы данных установленного SetRangeEnd. Последующие присваивания 
значений полю будут изменять конечное значение диапазона предварительно 
установленного SetRangeEnd.  Вызовите ApplyRange, чтобы  применить новый 
диапазон для фильтра базы данных.
EditRangeEnd отличается от SetRangeEnd, так как последний очищает все 
элементы буфера ключей поиска и приводит их к значению по умолчанию 
(NULL). EditRangeEnd  оставляет элементы буфера ключей поиска неизменными с 
их текущим значением.
Обратите внимание: С таблицами Paradox или dBASE, данные методы 
работают только с индексированными полями. С базами данных SQL, они могут 
работать с любыми полями указанными в свойстве IndexFieldNames.
Метод EditRangeStart.
Применяется в компоненте TTable.
Синтаксис: procedure EditRangeStart;
Описание.
EditRangeStart позволяет Вам изменить нижний предел ключей, 
установленный в SetRangeStart.  Вызовите ApplyRange, чтобы  применить новый 
диапазон для фильтрования базы данных. EditRangeStart отличается от 
SetRangeStart тем что последний очищает все элементы буфера ключей поиска и 
приводит к значению по умолчанию (NULL). EditRangeStart  оставляет элементы 
буфера ключей поиска неизменными с их текущим значением.
Обратите внимание: С таблицей Paradox или dBASE, методы работают 
только с индексированными полями. С базами данных SQL, они могут работать с 
любыми колонками указанными в свойстве IndexFieldNames.
Метод EmptyTable.
Применяется в компоненте TTable.
Синтаксис: procedure EmptyTable;
Описание.
 Метод EmptyTable удаляет все записи из таблицы базы данных указанной в
TableName. Перед вызовом этого метода свойства DatabaseName, TableName и 
TableType должны быть установлены.
Обратите внимание: Таблица должна быть открытой со свойством Exclusive 
установленным в True.
Метод EnableControls.
Применяется  TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure EnableControls;
Описание.
 Метод EnableControls восстанавливает связ базы данных со всеми
компонентами TDataSource, которые были разьединены вызовом метода 
DisableControls. В то время как источники данных разьединены, изменение в 
активной записи не будет отражено в них. Не зависимо от количества вызовов 
DisableControls и EnableControls, только последний вызов  EnableControls 
фактически будет модернизировать источники данных.
Метод FieldByName.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: function FieldByName (const FieldName: string):TField;
Описание.
 Метод FieldByName возвращает TField именем переданным как аргумент
через FieldName. Использование FieldByName защищает ваше приложение от 
изменения в порядка следования полей в базе данных. Если поле не может быть 
найдено, FieldByName поднимает исключение. Если Вы не знаете существует ли 
поле с требуемым именем, использование FindField метод.
Метод FindField.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: function FindField (const FieldName: string): TField;
Описание.
 Метод FindField возвращает поле с именем переданным через FieldName.
Вызове FindField слегка более медленный способ обращения к полю, чем прямая 
ссылка на свойство Fields, использование FindField защищает ваше приложение от 
изменения порядка полей в таблице. Если поле не может быть найдено, FindField 
возвращает nil.
Метод FindKey.
Применяется в компоненте TTable.
Синтаксис: function FindKey (const KeyValues: array of const):Boolean;
Описание.
 Метод FindKey обыскивает таблицу базы данных, чтобы найти запись чье
значение индексного поля соответствуют переданным в KeyValues. FindKey берет 
разграниченный запятой массив, как аргумент, где каждое значение  
соответствует индексному полю в таблице. Значение может быть символьным, 
переменным, пустой указатель (NULL), или nil. Если количество значений в 
переданном массиве меньше чем число полей в таблице базы данных, то 
оставшиеся значение принимаются равными (NULL). FindKey будет искать по 
значению указанному в массиве в текущем индексе.
FindKey делает следующее:
- Помещает TTable в состояние SetKey.
- Находит запись в таблице которая соответствует указанному значению.
- Если соответствующая запись найдена, то  перемещает курсор на нее, и 
возвращает True.
- Если соответствующая записи не найдена, то курсор не перемещается, и 
FindKey возвращает False.
Метод FindNearest.
Применяется в компоненте TTable.
Синтаксис: procedure FindNearest (const KeyValues: array of const);
Описание.
 Метод FindNearest перемещает курсор в первую запись, значение индексного
поля которой большее или равно переданным в KeyValues. Поиск начинается с 
первой записи, не с текущей позиции курсора. Этот метод может использоваться 
только с колонками данных типа string. Если Вы не передаете значения для 
каждого индексного поля, все неназначенные поля будут использовать значение 
пустого указателя.
FindNearest работает по умолчанию с первичным индекным полем. Чтобы 
осуществлять поиск в таблице по другим индексным полям, Вы должны 
определить имя поля в свойстве таблицы IndexFieldNames или имя индекса в 
свойстве IndexName.
 Свойство KeyExclusive указывает будет ли поиск помещать курсор на или
после записи которую ищут.
Обратите Внимание: С таблицей Paradox или dBASE, FindNearest работает 
только с индексированными полями. С базами данных SQL, он может работать с 
любыми колонками указанными в свойстве IndexFieldNames.
Метод First.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure First;
Описание.
 Метод First  перемещает курсор в первую запись в активном диапазоне
записей базы данных. Активный диапазон записей определяется фильтром 
установленным в ApplyRange.
Если база данных находится в состоянии Edit или Insert, First будет 
выполнять неявно Post любых измененных данных.
Метод FreeBookmark.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure FreeBookmark (Bookmark:TBookmark);
Описание.
Используйте метод FreeBookmark в комбинации с методами GetBookmark и 
GotoBookmark. FreeBookmark выпускает ресурсы системы сохраненные при 
вызыве GetBookmark.
Метод GetBookmark.
Применяется к TTable, TQuery, TStoredProc компонентах.
Синтаксис: function GetBookmark: TBookmark;
Описание.
 Метод GetBookmark сохраняет текущую информацию о записи базы данных,
чтобы позволить Вам возвратится к той же записи позже посредством вызова 
метода GotoBookmark. После использования bookmark (закладки) в конечном 
счете должен быть вызван метод FreeBookmark, для того, чтобы освободить 
ресурсы сохраненные при вызове GetBookmark. Если база данных пуста или не в 
состоянии Browse, GetBookmark будет возвращать nil.
Обратите Внимание: Все bookmarks (закладки) перестают действовать после 
того как база данных - закрывается или изменен индекс таблицы.
Метод GetFieldNames.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure GetFieldNames (var List: TStrings);
Описание.
 Метод GetFieldNames очищает TStrings аргумент, List, и записывает в него
имена каждого поля базы данных.
Метод GetIndexNames.
Применяется в компоненте TTable.
Синтаксис: procedure GetIndexNames (List: TStrings);
Описание.
 Метод GetIndexNames добавляет имена всех доступных индексов для TTable
в параметр List.
Метод GotoBookmark.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure GotoBookmark(Bookmark:TBookmark);
Описание.
 Метод GotoBookmark  перемещается курсор в запись соответствующую
bookmark (заклкдке), полученной через вызов GetBookmark. Так как Вы должны в 
конечном счете  вызвать метод FreeBookmark, чтобы освободить ресурсы 
сохраненные при вызове GetBookmark, Вы можете делать столько вызовов 
GotoBookmark сколько Вы желаете. Если параметр Bookmark - nil, GotoBookmark 
не делает ничего.
Метод GotoCurrent.
Применяется в компоненте TTable.
Синтаксис: procedure GotoCurrent (Table: TTable);
Описание.
Используйте метод GotoCurrent, чтобы синхронизировать позиции двух 
компонентов TTable которые используют одну и ту же таблицу базы данных. 
GotoCurrent изменяет позицию курсора таблицы, чтобы соответствовать позиции 
курсора в таблице Table, переданной как параметр.
Обратите Внимание: Обе таблицы должны иметь один и тот же 
DatabaseName и TableName, иначе возникнет исключительная ситуация "table 
mismatch".
Метод GotoKey.
Применяется в компоненте TTable.
Синтаксис: function GotoKey: Boolean;
Описание.
 Метод GotoKey используется с методами SetKey или EditKey, чтобы
двигаться на определенную запись в TTable.  Вызовите SetKey, чтобы поместить 
таблицу в состояние SetKey. В состоянии SetKey, назначенное поле указывает 
значение для поиска в индексированных полях. GoToKey перемещает курсор в 
первую запись в таблице, которая соответствует заданному значению поля. 
Функция GoToKey возвращает результат типа Boolean, при этом перемещает 
курсор и возвращает True если поиск успешен. Если поиск неудачен, то 
возвращает False и не  изменяет позицию курсора.
Обратите внимание: Если Вы хотите искать в подмножестве полей в много - 
полевом ключе, Вы должны установить свойство KeyFieldCount в число полей в 
которых Вы хотите искать.
Метод GotoNearest.
Применяется в компоненте TTable.
Синтаксис: procedure GotoNearest;
Описание.
 Метод GotoNearest используется с методом EditKey или SetKey, чтобы
двигаться на  запись базы данных чье индексное поле большие или равно 
значению свойства IndexFields. Сначала вызовите SetKey, чтобы поместить 
TTable в состояние SetKey, измените поля ключа, и, наконец,  вызовите 
GotoNearest, чтобы исполнить  перемещение. Свойство KeyExclusive указывает
будет ли поиск помещать курсор на или после записи, которую ищут.
Обратите внимание: Вы не должны назначить значение для каждого поля в 
индексном ключе. Любое неназначенное поле будет использовать значение 
NULL.
Поиск начинается в первой записи в таблице, не с текущего положения 
курсора.
Метод Insert.
Применяется в TTable, TQuery компонентах.
Синтаксис: procedure Insert;
Описание.
 Метод Insert помещает базу данных в состояние Insert и открывает новую,
пустую запись в текущем местоположении курсора. Когда приложение вызовет 
Post, новая запись будет вставлена в базу данных в позиции, основанной на 
индексе, если тот определен. Для того, чтобы отказаться от новой записи, 
используют метод Cancel. Этот метод имеет силу только для баз данных которые 
возвращают живую информацию.
Обратите внимание: Для индексированной таблицы, методы Append и Insert 
будут помещать новую запись в правильное местоположение в таблице, 
основанное на индексе таблицы. Если в основной таблице не определен ни один 
индекс, то запись будет вставлена следующим образом: Append будет добавлять 
запись к концу таблицы, а Insert будет вставлять ее в текущей позиции курсора. В 
любом случае, при сохранении в файле новая запись может заставить строки, 
показанные в сетке данных,  измениться.
Метод InsertRecord.
Применяется в TTable, TQuery компонентах.
Синтаксис: procedure InsertRecord(const Values: array of const);
Описание.
 Метод InsertRecord вставляет новую запись в базу данных, используя
значения полей переданных в параметре Values. Назначение элементов Values 
полям записи последовательно: первый элемент назначен первому полю, второй - 
второму, и т.д. Количество значений полей переданных в Values может отличаться 
от числа фактических полей в записи; любые остающиеся поля оставлены 
неназначенными (NULL). Тип каждого элемента Values должен быть совместим с 
типом поля, либо поле должно быть способно исполнять преобразование типа с  
использованием AsString, AsInteger, и т.д., в соответствии с типом элемента 
массива Values.
Этот метод имеет силу только для баз данных, которые возвращают живую 
информацию.
Обратите внимание: Для индексированной таблицы, методы AppendRecord и 
InsertRecord будут помещать новую запись в правильное местоположение в 
таблице, основанное на индексе таблицы. Если в основной таблице ни один  
индекс не определен, тогда запись будет вставлена следующим образом: 
AppendRecord будет  добавлять запись к концу таблицы, а InsertRecord будет 
вставлять ее в текущем положении курсора. В любом случае, при сохранении в 
файле новая запись может заставить строки, показанные в сетке данных,  
измениться.
Метод Last.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure Last;
Описание.
 Метод Last перемещает курсор в последнюю запись в активном диапазоне
записей базы данных. Активный диапазон записей определен фильтром 
установленным в SetRangeEnd.
Если база данных находится в состоянии Insert или Edit, Last будет неявно 
исполнять Post.
Метод MoveBy.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure MoveBy (Distance: Integer);
Описание.
 Метод MoveBy перемещает курсор на Distance записей базы данных. Если
значение Distance отрицательное число, то перемещение происходит в сторону 
начала таблицы. Если значение Distance положительно, то движение происходит 
вперед к концу таблицы. Если Distance - ноль, перемещения не происходит.
Если база данных находится в состоянии Insert или Edit, MoveBy будет 
неявно исполнять Post.
Метод Next.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure Next;
Описание.
 Метод Next  перемещает курсор вперед на одну запись. Если курсор - уже на
последней записи, то ни чего не происходит. Если база данных находится в 
состоянии Insert или Edit, Next будет неявно исполнять Post.
Метод Open.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure Open;
Описание.
 Метод Open открывает базу данных и помещает ее в состоянии Browse. Это
эквивалентно установке свойства Active в True. Для TQuery, Open выполняет 
выражение SELECT свойства SQL. Если выражение не возвращает результат 
(например, INSERT или UPDATE выражение), тогда используют ExecSQL вместо 
Open.
Для TStoredProc, Open использования, чтобы выполнить stored procedure, в 
том случае если процедура возвращает результат. Если stored procedure 
возвращает единственную запись, то используйте ExecProc.
Метод Post.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure Post;
Описание.
 Метод Post пишет текущую запись в базу данных. Post должен вызываться
после вызова методов Append или Insert, сохраняет любое желательное изменение 
полей текущей записи. Post ведет себя по-разному в зависимости от состояния 
базы данных.
- В состоянии Edit, Post изменяет текущую запись.
- В состоянии Insert, Post вставляет или добавляет в конец новую запись.
- В состоянии SetKey, Post передает изменение в буфер ключей поиска, и 
возвращает базу данных в состояние Browse.
Post  может быть выполнен явно, или неявно как часть другой процедуры. 
Когда приложение уходит с текущей записи, Delphi вызовет Post неявно. Методы
Next, MoveBy, Prior, First, и Last исполняют Post, если таблица находится в 
состоянии Insert или Edit. Методы Append, AppendRecord, Insert, и InsertRecord
также неявно исполняют Post.
Обратите внимание: Если запись по некоторым причинам не может быть 
записана в базу данных, база данных будет оставаться в состоянии Edit.
Метод Prior.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure Prior;
Описание.
 Метод Prior перемещает позицию текущей записи базы данных назад одну
запись. Если база данных находится в состоянии Insert или Edit, Prior будет неявно 
исполнять Post.
Метод Refresh.
Применяется в Table, TQuery, TStoredProc компонентах.
Синтаксис: procedure Refresh;
Описание.
 Метод Refresh повторно читает все записи от базы данных. Используйте
Refresh, чтобы убедиться в том, что отображена самая последняя информация из 
базы данных. Вызов Refresh может неожиданно изменить показываемые данные, 
что может смутить пользователя.
Метод SetFields.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure SetFields (const Values: array of const);
Описание.
SetFields присваивает значения, указанные в параметре (массиве) Values 
полям базе данных. Если Values имеет меньшее количество элементов чем 
имеются полей, оставшиеся элементы неизменяются. Чтобы назначить полю 
пустое значение, необходимо использовать ключевое слово NULL. Чтобы не 
назначать никакого значения полю, используйте nil; поле будет получать значение 
по умолчанию.
Перед вызовом этого метода, приложение должно вызвать Edit, чтобы 
поместить базу данных в состояние Edit. Затем, чтобы сохранить изменение 
текущей записи в базе данных, вызовите Post. Поскольку этот метод зависит явно 
от структуры основной таблицы, приложение должно использовать эго только в 
тех случаях когда структура таблицы не будет  изменяться.
Метод SetKey.
Применяется в компоненте TTable.
Синтаксис: procedure SetKey;
Описание.
 Метод SetKey помещает TTable в состояние SetKey (свойство State -
устанавливается в dsSetKey). Это разрешает приложению осуществлять поиск в 
таблице базы данных. В состоянии SetKey, Вы можете установить значения 
ключей поиска в буфере. Буфер ключей поиска - множество полей 
соответствующих ключевым полям таблицы. После установки значений ключей 
поиска в буфере, вызовите методы GotoKey, GotoNearest, FindKey, или 
FindNearest, чтобы  переместить курсор на соответствующую запись.
SetKey отличается от EditKey тем, что очищает все элементы буфера ключей 
поиска. А EditKey оставляет элементы буфера ключей поиска с их текущим 
значением, но позволяет Вам редактировать их.
Метод SetRange.
Применяется в компоненту TTable.
Синтаксис: procedure SetRange(const StartValues, EndValues: array of const);
Описание.
 Метод SetRange  объединяет функциональные возможности методов
SetRangeStart, SetRangeEnd и ApplyRange. SetRange назначает элементы 
StartValues начальному ключу индекса, элементы EndValues ■ конечному ключу 
индекса, и затем вызовает ApplyRange. Это позволяет приложению фильтровать 
отображаемые данные базе данных. В случае если либо StartValues либо EndValues 
имеет меньшее количество элементов чем число полей в текущем индексе, тогда 
остаювшимся присваивается NULL.
Обратите внимание: С таблицами Paradox или dBASE, эти методы работают 
только с индексированными полями. С базами данных SQL, они могут работать с 
любыми колонками, указанными в свойстве IndexFieldNames.
Метод SetRangeEnd.
Применяется в компоненте TTable.
Синтаксис: procedure SetRangeEnd;
Описание.
SetRangeEnd указывает, что следующие значения будут определять конец 
диапазона записей, которые включены в базу данных. Это позволяет приложению 
фильтровать данные, отображаемые в нем. Любое не указанное значение колонки 
не учитывается.  Соответствующий метод EditRangeEnd позволяет, сохраняя 
существующие значения диапазона, обновлять их. Вызовите ApplyRange, чтобы 
применить фильтр диапазона, определенный с SetRangeEnd и SetRangeStart.
SetRangeEnd отличается от EditRangeEnd тем, что он очищает все элементы 
фильтра диапазона к значению по умолчанию (или NULL). EditRangeEnd  
оставляет элементы фильтра диапазона с их текущим значением.
Обратите внимание: С таблицами Paradox или dBASE, эти методы работают 
только с индексированными полями. С базами данных SQL, они могут работать с 
любыми колонками указанными в IndexFieldNames свойстве.
Метод SetRangeStart.
Применяется в компоненте TTable.
Синтаксис: procedure SetRangeStart;
Описание.
SetRangeStart указывает значения, которые определяют начало диапазона 
записей, включенных в базу данных. Это позволяет приложению фильтровать 
данные, отображаемые в нем. Любое не указанные значение колонок не 
учитываются. Соответствующий метод EditRangeEnd позволяет, сохраняя 
существующие значения диапазона, обновлять их. Вызовите ApplyRange, чтобы 
применить фильтр диапазона определенный с SetRangeEnd и SetRangeStart.
SetRangeEnd отличается от EditRangeEnd тем, что он очищает все элементы 
фильтра диапазона к значению по умолчанию (или NULL). EditRangeEnd  
оставляет элементы фильтра диапазона с их текущим значением.
Обратите внимание: С таблицами Paradox или dBASE, эти методы работают 
только с индексированными полями. С базами данных SQL, они могут работать с 
любыми колонками указанными в IndexFieldNames свойстве.
Метод UpdateRecord.
Применяется в TTable, TQuery, TStoredProc компонентах.
Синтаксис: procedure UpdateRecord;
Описание.
 Метод UpdateRecord уведомляет каждый компонент TDataSource что
текущая запись собирается сохраниться в базе данных. Каждый источник данных 
в свою очередь уведомляет, все компоненты отображающие данные, чтобы они 
обновили поля записи в соответствии с их текущим значением. UpdateRecord -  
вызывает Post автоматически, но приложение может также использовать его 
отдельно.
