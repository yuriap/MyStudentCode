@ГЛАВА 14. ГЛОБАЛЬНЫЕ ССЫЛКИ.

#Глобальные ссылки

     Эта глава описывает все  элементы  Turbo  Vision,  которые  не
являются частью  иерархии  стандартных  объектов Turbo Vision.  Все
стандартные объекты описаны в главе 13.
     Элементы этой  главы  включают  типы,  константы,  переменные,
процедуры и функции,  определенные в модулях Turbo Vision. Типичный
элемент главы выглядит так:

Процедура Sample                                           Модуль
═════════════════════════════════════════════════════════════════
  Объявление     procedure Sample(AParameter);

  Функция        Sample выполняет ряд полезных функций
                 с параметром, AParameter.

  См. также      Функция Example


Процедура Abstract                                        Objects
═════════════════════════════════════════════════════════════════
  Объявление  procedure Abstract;

  Функция     Вызов этой процедуры завершает  программу  с  ошибкой
              времени выполнения 211.  При  реализации  абстрактных
              типов  объекта,  используйте  вызовы  Abstract  в тех
              виртуальных методах,  которые должны быть перекрыты в
              порожденных  типах.  Это  предотвратит  любые попытки
              использования экземпляров абстрактного типа.

  См. также   "Абстрактные методы" в главе 3.


#Переменная Application
Переменная Application                                        App
═════════════════════════════════════════════════════════════════
  Объявление  Application: PApplicaton = nil;

  Функция     Переменная Application  устанавливается  в  @Self   в
              начале TProgram.Init (вызывается в TApplication.Init)
              и очищается в nil в конце TProgram.Done (вызывается в
              TApplication.Done). Поэтому,   во   время  выполнения
              программы на Turbo Vision,  Application указывает  на
              объект-программу.

  См. также   TProgram.Init


#Переменная AppPalette
Переменная AppPalette                                         App
═════════════════════════════════════════════════════════════════
  Объявление  AppPalette: Integer = apColor;

  Функция     Выбирает одну  из  3  доступных в  программе   палитр
              (apColor, apBlackWhite,   apMonochrome).   AppPalette
              инициализируется TProgram.InitScreen в зависимости от
              текущего режима       экрана      и      используется
              TProgram.GetPalette для возврата палитры.  Вы  можете
              перекрыть TProgram.InitScreen,  чтобы  изменить выбор
              палитры по умолчанию.

  См. также   TProgram.InitScreen, константы apXXXX


#Константы apXXXX
Константы apXXXX                                              App
═════════════════════════════════════════════════════════════════
  Значения    Определены следующие константы палитры:

                        Таблица 14.1. Константы палитры.

     ────────────────────────────────────────────────────────────
     Константа     Значение  Назначение
     ────────────────────────────────────────────────────────────
     apColor          0      Палитра для цветного монитора
     apBlackWhite     1      Палитра для LCD монитора
     apMonochrome     2      Палитра для монохромного монитора
     ────────────────────────────────────────────────────────────

  Функция     Константы, начинающиеся   с   ap,   используются  для
              указания, с  какой  из  3  стандартных  палитр  будет
              работать программа   на  Turbo  Vision.  Три  палитры
              используются для     цветного,     черно-белого     и
              монохромного дисплеев.


#Процедура AssignDevice
Процедура AssignDevice                                   TextView
═════════════════════════════════════════════════════════════════
  Объявление  procedure AssignDevice(var T: Text;
              Screen: PTextDevice);

  Функция     Связывает текстовый  файл с TTextDevice. AssignDevice
              работает аналогично стандартной процедуре  Assign  за
              исключением того,   что  указывается  не  имя  файла.
              Вместо этого,   текстовый    файл    связывается    с
              TTextDevice данным   в  Screen  (запоминая  Screen  в
              первых 4   байтах   поля   UserData   в   TextRec(T).
              Последовательность операций  В/В для текстового файла
              будет читать  и  писать  из  TTextDevice,   используя
              виртуальные методы   StrRead  и  StrWrite.  Поскольку
              TTextDevice это  абстрактный  тип,  параметр   Screen
              обычно указывает   на   образец   TTerminal,  который
              реализует полную функциональность  видимого  элемента
              TTY подобного скроллинга.

  См. также   TTextDevice; TextRec

#Константы bfXXXX
Константы bfXXXX                                          Dialogs
═════════════════════════════════════════════════════════════════
  Значения     Определены слудующие флаги кнопки:

                          Таблица 14.2.

     ────────────────────────────────────────────────────────────
     Константа     Значение  Назначение
     ────────────────────────────────────────────────────────────
     bfNormal        $00     Нормальная кнопка
     bfDefault       $01     Кнопка по умолчанию
     bfLeftJust      @02     Метка кнопки выровнена влево
     ────────────────────────────────────────────────────────────

  Функция     Комбинация этих  значений  передается  в TButton.Init
              для определения  вновь   созданного   стиля   кнопки.
              bfNormal указывает   на  нормальную  не  умалчиваемую
              кнопку. bfDefault указывает что кнопка  будет кнопкой
              по умолчанию.  Обязанность  программиста,  обеспечить
              чтобы кнопка была единственной умалчиваемой кнопкой в
              TGroup. Значение  bfLeftJust  может  быть добавлено к
              bfDefault или  bfNormal  и  воздействует  на  позицию
              отображаемого текста внутри кнопки:  если очищено, то
              метка центрируется;  если   установлено,   то   метка
              выравнивается влево.

  См. также   TButton.Flags, TButton.MakeDefault, TButton.Draw


#Переменная ButtonCount
Переменная ButtonCount                                    Drivers
═════════════════════════════════════════════════════════════════
  Объявление  ButtonCount: Byte = 0;

  Функция     ButtonCount хранит число кнопок  мышки  или  0,  если
              мышка не  инсталлирована.  Вы можете использовать эту
              переменную для  определения  доступна  ли   поддержка
              мышки. Значение  устанавливается  в  иницилизационном
              коде Drivers и не может быть изменено.


#Переменная CheckSnow
Переменная CheckSnow                                      Drivers
═════════════════════════════════════════════════════════════════
  Объявление  CheckSnow: Boolean;

  Функция     CheckSnow выполняет    функцию   одноименного   флага
              стандартного модуля  Turbo  Pascal  -  Crt.  Проверка
              снега, замедляющая  вывод на экран,  требуется только
              для некоторых старых адаптеров CGA.

  См. также   InitVideo


#Процедура ClearHistory
Процедура ClearHistory                                   HistList
═════════════════════════════════════════════════════════════════
  Объявление  procedure ClearHistory;

  Функция     Удаляет все строки из всех списков истории.


#Процедура ClearScreen
Процедура ClearScreen                                     Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure ClearScreen;

  Функция     Очищает экран.  ClearScreen предполагает, что вначале
              был вызван    InitVideo.    Вам   редко   потребуется
              использовать эту  процедуру,  как  это  объяснено   в
              описанни InitVideo.

  См. также   InitVideo


#Константы cmXXXX
Константы cmXXXX                                            Views
═════════════════════════════════════════════════════════════════
  Функция     Эти константы      представляют      предопределенные
              команды Turbo   Vision.   Они   передаются   в   поле
              TEvent.Command событий     evMessage(evCommand      и
              evBroadcast) и    заставляют    методы    HandleEvent
              стандартных объектов Turbo Vision выполнять различные
              задачи.
              Turbo Vision резервирует значения констант от 0 до 99
              и от 256 до 999 для своих целей.  Обработчики событий
              стандартных объектов Turbo Vision  реагируют  на  эти
              предопределенные константы.     Прграммисты     могут
              определить свои собственные константы в диапазонах от
              100 до  255  и  от  1,000  до 65,535 без конфликтов с
              предопределенными командами.

  Значения    Следующие стандартные  команды  определены  в   Turbo
              Vision и  используются  стандартными  объектами Turbo
              Vision:

              Таблица 14.3. Коды стандартных команд.

──────────────────────────────────────────────────────────────────
Команда Значение Назначение
──────────────────────────────────────────────────────────────────
 cmValid   0     Передается в   TView.Valid   для   проверки  вновь
                 созданных образцов видимых элементов
 cmQuit    1     Заставляет TProgram.HandleEvent  вызывать EndModal
                 (cmQuit),  завершая программу.  Строка статуса или
                 одно  из  меню  обычно  содержат элемент,  который
                 переводит kbAltX и cmQuit.
 cmError   2     Не обрабатывается  никаким  объектом.  Может  быть
                 использована для представления нереализованных или
                 неподдерживаемых команд.
 cmMenu    3     Заставляет TMenuView.HandleEvent вызывать ExecView
                 для процесса выбора меню,  в результате чего может
                 быть  сгенерирована  новая   команда   с   помощью
                 PutEvent.
 cmClose   4     Обрабатывается TWindow.HandleEvent,   если    поле
                 InfoPtr  записи  события  установлено  в  nil  или
                 указывает  на  окно.  Если  окно   модальное,   то
                 посредством  PutEvent  генерируется  evCommand  со
                 значением из cmCancel.  Если окно немодальное,  то
                 то вызывается  метод  Close  при  условии что окно
                 поддерживает закрытие   (смотри   флаг   wfClose).
                 Отметка на   закрывающей  кнопке  окна  генерирует
                 событие evCommand с Command  из cmClose и InfoPtr,
                 который указывает на окно. Строка статуса или одно
                 из меню обычно содержит элемент, который переводит
                 kbAltF3 в cmClose.
 cmZoom    5     Заставляет TWindow.HandleEvent            вызывать
                 TWindow.Zoom,      если      окно     поддерживает
                 масштабирование (смотри  флаг  wfZoom) и если поле
                 InfoPtr  записи  события  установлено  в  nil  или
                 указывает    на    окно.    Отметка    на   кнопке
                 масштабирования окна или двойная отметка на полосе
                 заголовка  окна  генерирует  событие  evCommand  с
                 Command из cmZoom и InfoPtr,  который указывает на
                 окно.  Строка  статуса  или  одно  из  меню обычно
                 содержит элемент, который переводит kbF5 в cmZoom.
 cmResize  6     Заставляет TWindow.HandleEvent            вызывать
                 TView.DragView,  если  окно поддерживает изменение
                 размеров (смотри флаги wfMove  и  wfGrow).  Строка
                 статуса  или одно из меню обычно содержит элемент,
                 который переводит kbCtrlF5 в cmResize.
 cmNext    7     Заставляет TDeskTop.HandleEvent сдвигать последнее
                 окно на панели экрана  на  передний  план.  Строка
                 статуса  или одно из меню обычно содержит элемент,
                 который переводит kbF6 в cmNext.

 cmPrev    8     Заставляет TDeskTop.HandleEvent  сдвигать   первое
                 окно на панели экрана на самый задний план. Строка
                 статуса или одно из меню обычно  содержит элемент,
                 который переводит kbShiftF6 в cmPrev.
──────────────────────────────────────────────────────────────────

              Следующие стандартные    команды   используются   для
              определения   поведения   по    умолчанию    объектов
              диалогового окна:

        Таблица 14.4. Стандартные команды диалогового окна.

──────────────────────────────────────────────────────────────────
Команда    Значение  Назначение
──────────────────────────────────────────────────────────────────
 cmOK        10      Была нажата кнопка OK
 cmCancel    11      Диалоговое окно было отменено кнопкой Cancel,
                     закрывающей кнопкой или клавишей Enter
 cmYes       12      Была нажата кнопка Yes
 cmNo        13      Была нажата кнопка No
 cmDefault   14      Была нажата кнопка по умолчанию
──────────────────────────────────────────────────────────────────

              События с командами cmOK,  cmCancel,  cmYes или  cmNo
              завершают   модальный  диалог  TDialog.HandleEvent  и
              возвращают  значение  команды   (вызывая   EndModal).
              Модальный диалог обычно содержит по крайней мере один
              TButton   с   одним   из   этих   значений    команд.
              TDialog.HandleEvent         будет        генерировать
              команду-событие  cmCancel  в  ответ  на  событие   от
              клавиатуры kbEsc.
              Команда cmDefault заставляет  TButton.HandleEvent для
              умалчиваемой кнопки (см. флаг bfDefault) симулировать
              нажатие     кнопки.     TDialog.HandleEvent     будет
              генерировать  событие  команды  cmDefault  в ответ на
              событие клавиатуры kbEnter.
              Определены следующие    стандартные    команды    для
              использования стандартными видимыми элементами:

       Таблица 14.5. Стандартные команды видимых элементов.

──────────────────────────────────────────────────────────────────
Команда         Значение    Назначение
──────────────────────────────────────────────────────────────────
cmReceivedFocus     50  TView.SetState использует  функцию  Message
cmReleasedFocus     51  для передачи события evBroadcast с одним из
                        этих значений   в   свой  TView.Owner,  как
                        только sfFocused    изменяется.     InfoPtr
                        события указывает  на  сам видимый элемент.
                        Это информирует   любой   равный    видимый
                        элемент, что  видимый  элемент  получил или
                        освободил активность  и  что   они   должны
                        корректировать себя  соответственно. Объект
                        Tlabel, например, реагирует на эти команды,
                        включая или выключая свою подсветку.
cmCommandSetChanged 52  Метод TProgram.Idle    генерирует   событие
                        evBroadcast как   только    он    обнаружит
                        изменение в  текущем наборе команд (вызывая
                        методы EnableCommands,  DesableCommands или
                        SetCommands для   TView).  Общее  сообщение
                        cmCommandSetChanged посылается            в
                        HandleEvent каждого    видимого    элемента
                        иерархии (если  только  их  TView.EventMask
                        специфически не      маскируют      события
                        evBroadcast). Если   изменения   в   наборе
                        команд затрагивают  появление    видимого
                        элемента, он    должен    реагировать    на
                        cmCommandSetChanged своей     перерисовкой.
                        Объекты TBut ton,  TMenuView и TStatusLine,
                        например, реагируют    на    эту   команду,
                        перерисовывая себя.
cmScrollBarChanged  53  TScrollBar использует  функцию  Message для
cmScrollBarClicked  54  передачи события  evBroadcast  с  одним  из
                        этих   значений  в  свой  TView.Owner,  как
                        только мышка отмечает на полосе скроллинга.
                        InfoPtr   события   указывает   на   полосу
                        скроллинга. Общие    сообщения    создаются
                        любыми   равными    видимыми    элементами,
                        управляемыми полосой скроллинга, такими как
                        объекты TScroller и TListViewer.
cmSelectWindowNum   55  Заставляет TWiondow.HandleEvent    вызывать
                        TView.Select, если InfoInt  записи  события
                        соответствует               TWindow.Number.
                        TProgram.HandleEvent  реагирует на события
                        от клавиатуры   от  Alt-1  до  Alt-9  общим
                        сообщением cmSelectWindowNum с InfoInt от 1
                        до 9.
cmRecordHistory     60  Заставляет объект   THistory   "записывать"
                        текущее содержимое    объекта   TInputLine.
                        TButton посылает      общее       сообщение
                        cmRecordHistory своему владельцу,  когда он
                        выбран, в       результате,       заставляя
                        "записывать"   все   объекты   THistory   в
                        диалоговом окне.
──────────────────────────────────────────────────────────────────

  См. также   TView.HandleEvent, TCommandSet


#Константы coXXXX
Константы coXXXX                                          Objects
═════════════════════════════════════════════════════════════════
  Функция     Константы coXXXX   передаются  как  параметр  Code  в
              метод TColection.Error,       когда       TCollection
              обнаруживает ошибку во время операции.

  Значения    Следующие стандартные коды ошибок определены для всех
              коллекций Turbo Vision:

                      Таблица 14.6. Коды ошибок коллекции.

──────────────────────────────────────────────────────────────────
 Код ошибки  Значение  Назначение
──────────────────────────────────────────────────────────────────
 coIndexError    -1    Индекс  вышел  за  диапазон.  Параметр  Info
                       передает в метод Error  содержимое неверного
                       индекса.

 coOverflow      -2    Переполнение коллекции. TCollection.SetLimit
                       недостаточно для    расширения    коллекции.
                       Параметр Info   передает   в   метод   Error
                       запрашиваемый размер коллекции.
──────────────────────────────────────────────────────────────────

  См. также   TCollection


#Функция CStrLen
Функция CStrLen                                           Drivers
═════════════════════════════════════════════════════════════════
  Объявление  function CStrLen(S: String): Integer;

  Функция     Возвращает длину строки  S,  где  S  это  управляющая
              строка, использующая   символы   "~"   для   указания
              символов короткого набора.  "~" исключаются из  длины
              строки, поскольку  они  будут  появляться  на экране.
              Например, для строки '~B~roccoly', CStrLen возвращает
              8.

  См. также   MoveCStr


#Переменная CtrlBreakHit
Переменная CtrlBreakHit                                   Drivers
═════════════════════════════════════════════════════════════════
  Объявление  CtrlBreakHit: Boolean = False;

  Функция     Драйвер обработки  прерываний  от  клавиатуры   Turbo
              Vision всегда  устанавливает ее в True,  когда нажата
              Ctrl-Break. Это позволяет программам на  Turbo Vision
              перехватывать и реагировать на Ctrl-Break. Флаг может
              быть очищен в любое время установкой его в False.

  См. также   SaveCtrlBreak


#Функция CtrlToArrow
Функция CtrlToArrow                                       Drivers
═════════════════════════════════════════════════════════════════
  Объявление  function CtrlToArrow(KeyCode: Word): Word;

  Функция     Преобразует управляющие   WordStar-совместимые   коды
              клавиатуры в  соответствующие  коды  клавиш  курсора.
              Если младший  байт  KeyCode  соответствует  одному из
              значений управляющих   клавиш   в    таблице    14.7,
              результатом будет  соответствующая  константа kbXXXX.
              В противном случае KeyCode возвращается неизмененным.

                Таблица 14.7. Преобразование управляющих клавиш.

     ────────────────────────────────────────────────────────────
     Клавиша     Lo(KeyCode)   Результат
     ────────────────────────────────────────────────────────────
     Ctrl-A         $01          kbHome
     Ctrl-D         $04          kbRight
     Ctrl-E         $05          kbUp
     Ctrl-F         $06          kbEnd
     Ctrl-G         $07          kbDel
     Ctrl-S         $13          kbLeft
     Ctrl-V         $16          kbIns
     Ctrl-X         $18          kbDown
     ────────────────────────────────────────────────────────────


#Переменная CursorLines
Переменная CursorLines                                    Drivers
═════════════════════════════════════════════════════════════════
  Объявление  CursorLines: Word;

  Функция     Уставливает начальную   и   конечную  строки  курсора
              с помощью InitVideo.  Формат предполагает  функцию  1
              прерывания BIOS $10 для установки типа курсора.

  См. также   InitVideo,    TView.ShowCursor,    TView.HideCursor,
              TView.BlockCursor, Tview.NormalCursor


#Переменная DeskTop
Переменная DeskTop                                            App
═════════════════════════════════════════════════════════════════
  Объявление  DeskTop: PDeskTop = nil;

  Функция     Сохраняет указатель на TDeskTop программы. Переменная
              DeskTop инициализируется        TProgram.InitDeskTop,
              которая вызывается  TProgram.Init.  Окна и диалоговые
              окна обычно    вставляются    (TGroup.Insert)     или
              выполняются (TGroup.ExecView) на DeskTop.


#Процедура DisposeMenu
Процедура DisposeMenu                                       Menus
═════════════════════════════════════════════════════════════════
  Объявление  procedure DisposeMenu(Menu: PMenu);

  Функция     Освобождает все элементы указанных  меню  (и  все  их
              подменю).

  См. также   Тип TMenu


#Процедура DisposeStr
Процедура DisposeStr                                      Objects
═════════════════════════════════════════════════════════════════
  Объявление  procedure DisposeStr(P:String);

  Функция     Освобождает строки,  распределенные в куче с  помощью
              функции NewStr.

  См. также   NewStr


#Константы dmXXXX
Константы dmXXXX                                            Views
═════════════════════════════════════════════════════════════════
  Значения    Биты DragMode определены так:

              Рис. 14.1. Флаги режима Drag.

             ┌─── DragMode ──┐
             msb           lsb
              ┌─┬─┬─┬─────────── dmLimitAll = $F0
             ╔╧╤╧╤╧╤╧╤═╤═╤═╤═╗
             ╚╤╧╤╧╤╧╤╧═╧═╧╤╧╤╝
              │ │ │ │     │ └─── dmDragMove = $01
              │ │ │ │     └───── dmDragGrow = $02
              │ │ │ └─────────── dmLimitLoX = $10
              │ │ └───────────── dmLimitLoY = $20
              │ └─────────────── dmLimitHiX = $40
              └───────────────── dmLimitHiY = $80


  Функция     Эти константы  используются  для компоновки параметра
              Mode метода TView.DragView.  Они указывают  разрешены
              ли движение    и/или    изменение   размера   и   как
              интерпретировать параметр Limits.
              Константы определены так:

                Таблица 14.8. Константы режима Drag.

     ────────────────────────────────────────────────────────────
     Константа    Назначение
     ────────────────────────────────────────────────────────────
     dmDragMove   Позволяет видимому элементу перемещаться.
     dmDragGrow   Позволяет видимому элементу изменять размер.
     dmLimitLoX   Левая сторона видимого элемента не может
                  выходить за Limits.
     dmLimitLoY   Верхняя сторона видимого элемента не может
                  выходить за Limits.
     dmLimitHiX   Правая сторона видимого элемента не может
                  выходить за Limits.
     dmLimitHiY   Нижняя сторона видимого элемента не может
                  выходить за Limits.
     dmLimitAll   Никакая часть видимого элемента не может
                  выходить за Limits.
     ────────────────────────────────────────────────────────────


#Процедура DoneEvents
Процедура DoneEvents                                      Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure DoneEvents;

  Функция     Завершает монитор   событий  Turbo  Vision,  отключая
              обработчик прерываний мышки. Вызывается автоматически
              при вызове TApplication.Done.

  См. также   TApplication.Done, InitEvents


#Процедура DoneHistory
Процедура DoneHistory                                     Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure DoneHistory;

  Функция     Освобождает блок истории, распределенный InitHistory.
              Вызывается       автоматически       при       вызове
              TApplication.Done.

  См. также   Процедура InitHistory, TApplication.Done


#Процедура DoneMemory
Процедура DoneMemory                                       Memory
═════════════════════════════════════════════════════════════════
  Объявление  procedure DoneMemory;

  Функция     Завершает монитор памяти Turbo Vision, освобождая все
              буфера, распределенные  через  GetBufMem.  Вызывается
              автоматически при вызове TApplication.Done.

  См. также   TApplication.Done, InitMemory


#Процедура DoneSysError
Процедура DoneSysError                                    Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure DoneSysError;

  Функция     Завершает обработчик системных ошибок  Turbo  Vision,
              восстанавливая вектора прерываний 09H, 1BH, 21H, 23H,
              24H и  восстанавливая  состояние  Ctrl-Break  в  DOS.
              Вызывается       автоматически       при       вызове
              TApplication.Done.


  См. также   TApplication.Done, InitSysError


#Процедура DoneVideo
Процедура DoneVideo                                       Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure DoneVideo;

  Функция     Завершает монитор экрана Turbo Vision, восстанавливая
              начальный режим экрана (StartupMode),  очищая экран и
              восстанавливая курсор  Вызывается  автоматически  при
	      вызове TApplication.Done.


  См. также   TApplication.Done, InitVideo,
              переменная StartupMode


#Переменная DoubleDelay
Переменная DoubleDelay                                    Drivers
═════════════════════════════════════════════════════════════════
  Объявление  DoubleDelay: Word = 8;

  Функция     Определяет временной  интевал  (в  1/18.2   секундах)
              между  нажатиями  кнопки  мышки  для порядка различия
              двойного нажатия   и    двух    отдельных    нажатий.
              Используется GetMouseEvent   для   генерации  события
              Double, если  нажатия  произошли  в  этом   временном
              интервале.

  См. также   TEvent.Double, GetMouseEvent


#Переменная EmsCurHandle
Переменная EmsCurHandle                                   Objects
═════════════════════════════════════════════════════════════════
  Объявление  EmsCurhandle: Word = $FFFF;

  Функция     Содержит текущий   обработчик    EMS,    отображенный
              TEmsStream в   нулевую   физическую   страницу   EMS.
              TEmsStream избегает дорогих  вызовов  переотображения
              EMS подкачкой  состояния  EMS.  Если  Ваша  программа
              использует EMS   для   других    целей,    установите
              EmsCurHandle и     EmsCurPage     в    $FFFF    перед
              использованием TEmsStream  -  это   будет   вынуждать
              TEmsStream восстанавливать свое отображение.

  См. также   TEmsStream.Handle


#Переменная EmsCurPage
Переменная EmsCurPage                                     Objects
═════════════════════════════════════════════════════════════════
  Объявление  EmsCurpage: Word = $FFFF;

  Функция     Содержит текущий  номер  логической   страницы   EMS,
              отображенной TEmsStream в нулевую физическую страницу
              EMS.    TEmsStream    избегает    дорогих     вызовов
              переотображения  EMS  подкачкой  состояния EMS.  Если
              Ваша  программа  использует  EMS  для  других  целей,
              установите  EmsCurHandle  и  EmsCurPage в $FFFF перед
              использованием  TEmsStream  -  это  будет   вынуждать
              TEmsStream восстанавливать свое отображение.


  См. также   TEmsStream.Page


#Константы evXXXX
Константы evXXXX                                          Drivers
═════════════════════════════════════════════════════════════════
  Функция     Эти мнемоники    обозначают    типы    событий    для
              обработчиков событий Turbo Vision.  Константы  evXXXX
              используются в нескольких местах:  в поле What записи
              события, в  поле  EventMask  видимого  элемента  и  в
              переменных PositionalEvents и FocusedEvents.

  Значения
              Следующие значения    флагов    событий    обозначают
              стандартные типы событий:

                    Таблица 14.9. Флаги стандартных событий.

     ────────────────────────────────────────────────────────────
     Константа     Значение         Назначение
     ────────────────────────────────────────────────────────────
     evMouseDown   $0001   Кнопка мышки нажата
     evMouseUp     $0002   Кнопка мышки отпущена
     evMouseMove   $0004   Мышка изменила положение
     evMouseAuto   $0008   Периодическое событие до тех пор, пока
                           нажата кнопка мышки
     evKeyDown     $0010   Клавиша нажата
     evCommand     $0100   Событие-команда
     evBroadcast   $0200   Событие-общее сообщение
     ────────────────────────────────────────────────────────────

              Следующие константы    могут    использоваться    для
              маскирования типов событий:

                    Таблица 14.10. Маски стандартных событий.

     ────────────────────────────────────────────────────────────
     Константа     Значение         Назначение
     ────────────────────────────────────────────────────────────
     evNothing     $0000    Событие уже обработано
     evMouse       $000F    Событие от мышки
     evKeyboard    $0010    Событие от клавиатуры
     evMessage     $FF00    Событие-сообщение (команда, общее
                            сообщение или определено пользователем).
     ────────────────────────────────────────────────────────────

     Биты маски события определены так:

                   Рис. 14.2. Отображение битов маски события.

     ┌────── Флаги события ─────────┐
     msb                           lsb
      ┌─┬─┬─┬─┬─┬─┬─┬─────────────────── evMessage   = $FF00
      │ │ │ │ │ │ │ │       ┌─────────── evKeyboard  = $0010
      │ │ │ │ │ │ │ │       │ ┌─┬─┬─┬─── evMouse     = $000F
     ╔╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤═╤═╤═╤╧╤╧╤╧╤╧╤╧╗
     ╚═╧═╧═╧═╧═╧═╧╤╧╤╧═╧═╧═╧╤╧╤╧╤╧╤╧╤╝
                  │ │       │ │ │ │ └─── evMouseDown = $0001
                  │ │       │ │ │ └───── evMouseUp   = $0002
                  │ │       │ │ └─────── evMouseMove = $0004
                  │ │       │ └───────── evMouseAuto = $0008
                  │ │       └─────────── evKeyDown   = $0010
                  │ └─────────────────── evCommand   = $0100
                  └───────────────────── evBroadcast = $0200

              Маски стандартных событий могут быть использованы для
              быстрого   определения,   принадлежит   ли    событие
              конкретному семейству событий. Например,

     if Event.What and evMouse <> 0 then DoMouseEvent;

  См. также TEvent, TView.EventMask, GetKeyEvent, GetMouseEvent,
            методы HandleEvent, PositionalEvents, FocusedEvents.

#Тип FNameStr
Тип FNameStr                                              Objects
═════════════════════════════════════════════════════════════════
  Объявление  FNameStr = String[79];

  Функция     Строка, содержащая имя файла DOS.



#Переменная FocusedEvents
Переменная FocusedEvents                                    Views
═════════════════════════════════════════════════════════════════
  Оъявление  FocusedEvents: Word = evKeyboard + evCommand;

  Функция     Определяет классы   событий    как    сфокусированные
              события. Переменные  FocusedEvents и PositionalEvents
              используются TGroup.HandleEvent для  определения, как
              соотносятся события к подэлементам группы. Если класс
              события не    содержится    в    FocusedEvents    или
              PositionalEvents, то  оно  интерпретируется как общее
              событие.

  См. также   Переменные PositionalEvents, TGroup.HandleEvent,
              TEvent, константы evXXXX.


#Процедура FormatStr
Процедура FormatStr                                       Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure FormatStr(var Result: String;
                                  Format: String; var Params);

  Функция     Процедура форматирования   строки,  которая  работает
              подобно функции языка Си  vsprintf.  Format  включает
              спецификаторы формата,   а   Params  содержит  список
              параметров. FormatStr выполняет форматированный вывод
              строки в Result.
              Параметр Format    может    содержать   любое   число
              спецификаторов формата,  для отображения параметров в
              Params. Формат спецификаторов - %[-][nnn]X, где
              - % указывает начало спецификатора формата;
              - [-]  необязательный знак минуса,  указывающий,  что
              параметр будет выровнен влево (по умолчанию параметры
              при отображении выравниваются вправо);
              - [nnn]  -  необязательный  десятичный   спецификатор
              длины в  диапазоне  0-255  (0 указывает на отсутствие
              длины, а не нуль означает,  что выводится поле в  nnn
              символов);
              - Х - символ формата:
                 - 's' означает, что параметр указывает на строку;
                 - 'd' означает  десятичное  представление  LongInt
                   параметра;
                 - 'c'  означает,  что  младший  байт  параметра  -
                   символ;
                 - 'x'  означает  шестнадцатиричное   представление
                   параметра LongInt.
                 - '#'устанавливает индекс параметра в nnn.

              Например, если   параметр   указывает   на    строку,
              содержащую   'spiny',  следующая  таблица  показывает
              спецификаторы и их результаты при печати:


           Таблица 14.11.   Спецификаторы  формата  и  их результаты.

     ─────────────────────────────────────────
        Спецификатор   Результат
     ─────────────────────────────────────────
        %6s            ' spiny'
        %-6s           'spiny'
        %3s            'iny'
        %-3s           'spi'
        %06s           '0spiny'
        %-06s          'spiny0'
     ────────────────────────────────────────

              Params - это нетипированный var  параметр, содержащий
              параметры с соответствующимим спецификаторами формата
              в Format.  Params должен быть массивом из LongInt или
              указателей   или   записью,  содержащей  LongInt  или
              указатели.
              Например, для вывода строки сообщения об ошибке

              Error in file [file name] at line [line number]

              Вы должны послать следующую строку в Format:

              'Error in file %s at line %d'.

              Params должен  содержать  указатель  на  строку имени
              файла и Longint,  представляющая число строк в файле.
              Это может быть сделано двумя способами: в массиве или
              в записи.
              Следующий пример  показывает  два  типа  объявлений и
              присвоений   переменных,   оба   создают   допустимые
              значения, передаваемые как Params в FormatStr.

                 type
                   ErrMsgRec = record
                     FileName: PString;
                     LineNo: Longint;
                   end;

                   ErrMsgArray = array[0..1] of Longint;

                 const
                   TemplateMsg = 'Error in file %s at line %d';

                 var
                   MyFileName: FNameStr;
                   OopsRec: ErrMsgRec;
                   DarnArray: ErrMsgArray;
                   TestStr: String;

                 begin
                   MyFileName := 'WARTHOG.ASM';

                   with OopsRec do
                   begin
                     FileName := @MyFileName;
                     LineTo := 42;
                   end;
                   FormatStr(TestStr, TemplateMsg, OopsRec);
                   Writeln(TestStr);

                   DarnArray[0] := Longint(@MyFileName);
                   DarnArray[1] := 24;
                   FormatStr(TestStr, TemplateMsg, DarnArray);
                   Writeln(TestStr);
                 end;

  См. также   Функцию SystemError, объект TParamText.


#Процедура FreeBufMem
Процедура FreeBufMem                                       Memory
═════════════════════════════════════════════════════════════════
  Объявление  procedure FreeBufMem(P: Pointer);

  Функция     Освобождает кэш-буфер, ссылаемый указателем Р.

  См. также   GetBufMem, DoneMemory.


#Функция GetAltChar
Функция GetAltChar                                        Drivers
═════════════════════════════════════════════════════════════════
  Объявление  function GetAltChar(KeyCode: Word): Char;

  Функция     Возвращает символ    Ch,    для    которого    Alt-Ch
              вырабатывает двухбайтовый    скан-код,    данный    в
              аргументе KeyCode.   Эта   функция   дает    обратное
              к GetAltCode отображение.

  См. также   GetAltCode.


#Функция GetAltCode
Функция GetAltCode                                        Drivers
═════════════════════════════════════════════════════════════════
  Объявление  function GetAltCode(Ch: Char): Word;

  Функция     Возвращает двухбайтовый скан-код, соответствующий
              Alt-Ch. Эта  функция  делает  обратное  к  GetAltChar
              отображение.

  См. также   GetAltChar.


#Процедура GetBufMem
Процедура GetBufMem                                        Memory
═════════════════════════════════════════════════════════════════
  Объявление  procedure GetBufMem(var P: Pointer; Size: Word);

  Функция     Распределяет кэш-буфер  для  Size  байт  и запоминает
              указатель на него в Р. Если нет памяти для кэш-буфера
              запрашиваемого размера, Р устанавливается в nil. Кэш-
              буфер отличается    от    обычных     блоков     кучи
              (распределяемых с помощью New,  GetMem или MemAlloc),
              в которых они  могут  размещаться  или  освобождаться
              монитором памяти    в    любое    время.   Указатель,
              передаваемый в GetBufMem,  становится  указателем  на
              кэш-буфер и  он  (и только он) корректируется,  когда
              буфер перемещается  монитором  памяти.  Если  монитор
              памяти решает освободить буфер, он устанавливает этот
              указатель в  nil.  Кэш-буфер  может  быть  освобожден
              через  вызов  FreeBufMem.  Кэш-буфера  будут занимать
              любое  нераспределенное   пространство   кучи   между
              HeapPtr и HeapEnd, включая область, установленную для
              пула надежности программы.

              Turbo Vision   использует   кэш-буфера  для  подкачки
              содержимого объектов   TGroup   (таких,   как   окна,
              диалоговые окна  и  панель  экрана),  как  только эти
              объекты   устанавливают   флаг   ofBuffered   -   это
              значительно   повышает   производительность  операций
              перерисовки.

  См. также   FreeBuffMem, InitMemory, TGroup.Draw.


#Процедура GetKeyEvent
Процедура GetKeyEvent                                     Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure GetKeyEvent(var Event: TEvent);

  Функция     Проверяет, доступно  ли событие от клавиатуры вызовом
              прерывания BIOS INT 16H.  Если клавиша  была  нажата,
              Event.What устанавливается      в     evKeyDown     и
              Event.KeyCode устанавливается в cкан-код  клавиши.  В
              противном случае,    Event.What   устанавливается   в
              evNothing. GetKeyEvent         вызывается          из
              TProgram.GetEvent.

  См. также TProgramm.GetEvent, константы evXXXX, TView.HandleEvent.


#Процедура GetMouseEvent
Процедура GetMouseEvent                                   Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure GetMouseEvent(var Event: TEvent);

  Функция     Проверяет, доступно  ли  событие  от мышки из очереди
              событий от мышки, поддерживаемой обработчиком событий
              Turbo Vision.   Если  происходит  событие  от  мышки,
              Event.What устанавливается в  evMouseDown, evMouseUp,
              evMouseMove или       evMouseAuto;      Event.Buttons
              устанавливается в  mbLeftButton  или   mbRightButton;
              Event.Double устанавливается в True или False; Event.
              Where устанавливается в позицию  мышки  в  глобальных
              координатах (соответствующих   координатной   системе
              TApplication). Если  события  от  мышки   недоступны,
              Event.What устанавливается в evNothing. GetMouseEvent
              вызывается из TProgram.GetEvent.

  См. также  TProgram.GetEvent, события evXXXX, методы HandleEvent.


#Константы gfXXXX
Константы gfXXXX                                            Views
═════════════════════════════════════════════════════════════════
  Функция     Эти мнемоники   используются   для   установки  полей
              GrowMode во всех объектах TView и  порожденных. Биты,
              установленные в  GrowMode,  определяют,  как  видимый
              элемент будет изменяться в зависимости  от  изменений
              размера его владельца.

  Значения    Биты GrowMode определены как:

                        Рис. 14.3. Биты режима Grow.

             ┌─── GrowMode ──┐
             msb           lsb
                      ┌─┬─┬─┬─── gfGrowAll = $0F
             ╔═╤═╤═╤═╤╧╤╧╤╧╤╧╗
             ╚╤╧═╧╤╧╤╧╤╧╤╧╤╧╤╝
              └─┬─┘ │ │ │ │ └─── gfGrowLoX = $01
                │   │ │ │ └───── gfGrowLoY = $02
       Неопределены │ │ └─────── gfGrowHiX = $04
                    │ └───────── gfGrowHiY = $08
                    └─────────── gfGrowRel = $10


                 Таблица 14.12.  Определения флага  режима Grow.

──────────────────────────────────────────────────────────────────
 Константа        Назначение
──────────────────────────────────────────────────────────────────
 gfGrowLoX    Если установлен,  то левая сторона видимого  элемента
              будет находиться   на   одном  расстоянии  от  правой
              стороны владельца.
 gfGrowLoY    Если установлен, то верхняя сторона видимого элемента
              будет находиться   на   одном  расстоянии  от  нижней
              стороны владельца.
 gfGrowHiX    Если установлен,  то правая сторона видимого элемента
              будет   находиться  на  одном  расстоянии  от  правой
              стороны владельца.
 gfGrowHiY    Если установлен,  то нижняя сторона видимого элемента
              будет находиться   на   одном  расстоянии  от  нижней
              стороны владельца.
 gfGrowAll    Если установлен,  то видимый элемент будет сдвигаться
              вместе с правым нижним углом его владельца.
 gfGrowRel    Для использования  с   объектами   TWindow,   которые
              находятся в  панели  экрана:  видимый  элемент  будет
              изменять размер относительно размера  владельца. Окно
              будет обрабатываться      соответственно      размеру
              владельца, даже когда происходит  переключение  между
              режимами 25 и 43/50 строк.
──────────────────────────────────────────────────────────────────
              Заметим, что  LowX=  левая  сторона;  LowY  = верхняя
              сторона;  HiX = правая сторона; HiY = нижняя сторона.

  См. также TView.GrowMode


#Константы hcXXXX
Константы hcXXXX                                            Views
═════════════════════════════════════════════════════════════════
  Значения    Определены следующие константы контекста подсказки:

           Таблица 14.13. Константы контекста подсказки.

     ─────────────────────────────────────────
     Константа    Значение  Назначение
     ─────────────────────────────────────────
     hcNoContext     0    Контекст не задан
     hcDragging      1    Объект - перемещаем
     ─────────────────────────────────────────

  Функция     Значение TView.HelpCtx по  умолчанию  -  hcNoContext,
              которое указывает,  что  для  видимого  элемента  нет
              контекста подсказки.   TView.GetHelpCtx    возвращает
              hcDragging, как  только  видимый  элемент  становится
              перемещаемым (это   указывается   состоянием    флага
              sfDragging).
              Turbo Vision  резервирует  для  контекста   подсказки
              значения от  0 до 999.  Программисты могут определять
              свои константы в диапазоне от 1,000 до 65,535.

  См. также  TView.HelpCtx, TStatusLine.Update.


#Процедура HideMouse
Процедура HideMouse                                       Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure HideMouse;

  Функция     Курсор мышки    изначально    видим    после   вызова
              InitEvents. HideMouse  прячет  мышку  и   увеличивает
              внутренний "счетчик    мышки"   в   драйвере   мышки.
              ShowMouse будет уменьшать этот счетчик  и  показывать
              курсор мышки, когда счетчик становится равен 0. Таким
              образом, вызовы  HideMouse  и  ShowMouse  могут  быть
              вложенными, но всегда должны быть сбалансированы.

  См. также   InitEvents, DoneEvents, ShowMouse


#Переменная HiResScreen
Переменная HiResScreen                                    Drivers
═════════════════════════════════════════════════════════════════
  Объявление  HiResScreen: Boolean;

  Функция     Устанавливается в  True  с  помощью  InitVideo,  если
              экран поддерживает режим  43/50  строк  (EGA/VGA);  в
              противном случае устанавливается в False.

  См. также   InitVideo


#Процедура HistoryAdd
Процедура HistoryAdd                                     HistList
═════════════════════════════════════════════════════════════════
  Объявление  procedure HistoryAdd(Id: Byte; var Str: String);

  Функция     Добавляет строку Str в список истории,  указываемый с
              помощью Id.


#Переменная  HistoryBlock
Переменная  HistoryBlock                                 HistList
═════════════════════════════════════════════════════════════════
  Объявление  HistoryBlock: Pointer = nil;

  Функция     Указывает на  буфер,  вызывающий   блок   истории   и
              используемый для хранения строк истории. Размер блока
              определяется посредством    HistorySize.    Указатель
              устанавливается в  nil  до  тех  пор  пока  не  будет
              установлен с помощью InitHistory. Его значение нельзя
              изменить.

  См. также  процедуру InitHistory, переменную HistorySize.


#Функция HistoryCount
Функция HistoryCount                                     HistList
═════════════════════════════════════════════════════════════════
  Объявление  function HistoryCount(Id: Byte): Word;

  Функция     Возвращает количество   строк   в   списке   истории,
              соответствующее номеру ID.


#Переменная HistorySize
Переменная HistorySize                                   HistList
═════════════════════════════════════════════════════════════════
  Объявление  HistorySize: Word = 1024;

  Функция     Задает размер     блока     истории,     используемый
              администратором списка истории для хранения значений,
              введенных в   строках   ввода.   Размер   фиксируется
              посредством InitHistory  при  запуске  программы.  По
              умолчанию размер  блока  равен  1К,  но  может   быть
              изменен перед  вызовом  InitHistory.  Значение нельзя
              изменять после вызова InitHistory.

  См. также   процедуру InitHistory, переменную HistoryBlock.


#Функция HistoryStr
Функция HistoryStr                                       HistList
═════════════════════════════════════════════════════════════════
  Объявление function HistoryStr(Id: Byte; Index: Integer): String;

  Функция     Возвращает Index    строку    в    списке    истории,
              соответствующую номеру ID.


#Переменная HistoryUsed
Переменная HistoryUsed                                   HistList
═════════════════════════════════════════════════════════════════
  Объявление  HistoryUsed: Word = 0;

  Функция     Используется внутри  администратором  списка  истории
              для указания на смещение внутри  блока  истории.  Это
              значение нельзя изменить.


#Процедура InitEvents
Процедура InitEvents                                      Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure InitEvents;

  Функция     Инициализирует монитор    событий    Turbo    Vision,
              подключая обработчик  прерываний  мышки  и  показывая
              мышку. Вызывается автоматически TApplication.Init.

  См. также   DoneEvents.


#Процедура  InitHistory
Процедура  InitHistory                                   HistList
═════════════════════════════════════════════════════════════════
  Объявление InitHistory;

  Функция     Вызывается с     помощью     TApplication.Init    для
              распределения блока  памяти  в   куче,   используемом
              монитором списка  истории.  Размер блока определяется
              переменной HistorySize.  После   вызова   InitHistory
              переменная HistoryBlock указывает на начало блока.

  См. также  TProgram.Init, процедуру DoneHistory.



#Процедура InitMemory
Процедура InitMemory                                       Memory
═════════════════════════════════════════════════════════════════
  Объявление  procedure InitMemory;

  Функция     Инициализирует монитор    памяти    Turbo     Vision,
              инсталлируя функцию   объявления  кучи  в  HeapError.
              Вызывается автоматически посредством TApplication.Init.

  См. также   DoneMemory.


#Процедура InitSysError
Процедура InitSysError                                    Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure InitSysError;

  Функция     Инициализирует обработчик  системных   ошибок   Turbo
              Vision,   переопределяя   вектора   прерываний   09H,
              1BH,21H,  23H,  24H и очищая состояние  Ctrl-Break  в
              DOS.     Вызывается     автоматически     посредством
              TApplication.Init.

  См. также   DoneSysError.


#Процедура InitVideo
Процедура InitVideo                                       Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure InitVideo;

  Функция     Инициализирует монитор экрана Turbo Vision. Сохраняет
              текущий режим  экрана  в  StartupMode  и  переключает
              экран  в  режим,  указанный в ScreenMode.  Переменные
              ScreenWidth,  ScreenHeight,  HiResScreen,  CheckSnow,
              ScreenBuffer     и     CursorLines     корректируются
              соответственно.  Режим  экрана  позднее  может   быть
              изменен    использованием   SetVideoMode.   InitVideo
              вызывается         автоматически          посредством
              TApplication.Init.

  См. также   DoneVideo, SetVideoMode, smXXXX.


#Константы  kbXXXX
Константы  kbXXXX                                         Drivers
═════════════════════════════════════════════════════════════════
  Функция     Два множества констант, начинающихся с "kb" связаны с
              клавиатурой.

  Значения    Следующие значения  определяют состояние клавиатуры и
              могут быть использованы при проверке  регистров Shift
              клавиатуры, которое запоминается в байте с абсолютным
              адресом $40:$17. Например,

     var
       ShiftState: Byte absolute $40:$17;
       ...
     if ShiftState and kbAltShift <> 0 then AltKeyDown;

     Таблица 14.14.  Состояние клавиатуры и маски Shift.

──────────────────────────────────────────────────────────────────
 Константа     Значение    Назначение
──────────────────────────────────────────────────────────────────
 kbRightShift    $0001   Установлено, если правый Shift нажат
 kbLeftShift     $0002   Установлено, если левый Shift нажат
 kbCtrlShift     $0004   Установлено, если Ctrl нажат
 kbAltShift      $0008   Установлено, если Alt нажат
 kbScrollState   $0010   Установлено, если клавиатура в состоянии
                         ScrollLock
 kbNumState      $0020   Установлено, если клавиатура в состоянии
                         NumLock
 kbCapsState     $0040   Установлено, если клавиатура в состоянии
                         CapsLock
 kbInsState      $0080   Установлено, если клавиатура в состоянии
                         InsLock
──────────────────────────────────────────────────────────────────

                 Таблица 14.15. Коды Alt-буква.

     ───────────────────────────────────────────────────────────
       Константа    Значение           Константа    Значение
     ───────────────────────────────────────────────────────────
       kbAltA       $1E00              kbAltN       $3100
       kbAltB       $3000              kbAltO       $1800
       kbAltC       $2E00              kbAltP       $1900
       kbAltD       $2000              kbAltQ       $1000
       kbAltE       $1200              kbAltR       $1300
       kbAltF       $2100              kbAltS       $1F00
       kbAltG       $2200              kbAltT       $1400
       kbAltH       $2300              kbAltU       $1600
       kbAltI       $1700              kbAltV       $2F00
       kbAltJ       $2400              kbAltW       $1100
       kbAltK       $2500              kbAltX       $2D00
       kbAltL       $2600              kbAltY       $1500
       kbAltM       $3200              kbAltZ       $2C00
     ───────────────────────────────────────────────────────────

             Таблица 14.16. Коды специальных клавиш.

     ───────────────────────────────────────────────────────────
       Константа    Значение           Константа    Значение
     ───────────────────────────────────────────────────────────
       kbAltEqual   $8300              kbEnd        $4F00
       kbAltMinus   $8200              kbEnter      $1C0D
       kbAltSpace   $0200              kbEsc        $011B
       kbBack       $0E08              kbGrayMinus  $4A2D
       kbCtrlBack   $0E7F              kbHome       $4700
       kbCtrlDel    $0600              kbIns        $5200
       kbCtrlEnd    $7500              kbLeft       $4B00
       kbCtrlEnter  $1C0A              kbNoKey      $0000
       kbCtrlHome   $7700              kbPgDn       $5100
       kbCtrlIns    $0400              kbPgUp       $4900
       kbCtrlLeft   $7300              kbrayPlus    $4E2B
       kbCtrlPgDn   $7600              kbRight      $4D00
       kbCtrlPgUp   $8400              kbShiftDel   $0700
       kbCtrlPrtSc  $7200              kbShiftIns   $0500
       kbCtrlRight  $7400              kbShiftTab   $0F00
       kbDel        $5300              kbTab        $0F09
       kbDown       $5000              kbUp         $4800
     ───────────────────────────────────────────────────────────

                Таблица 14.17. Коды Alt-число.

     ───────────────────────────────────────────────────────────
       Константа    Значение           Константа    Значение
     ───────────────────────────────────────────────────────────
       kbAlt1       $7800              kbAlt6       $7D00
       kbAlt2       $7900              kbAlt7       $7E00
       kbAlt3       $7A00              kbAlt8       $7F00
       kbAlt4       $7B00              kbAlt9       $8000
       kbAlt5       $7C00              kbAlt0       $8100
     ───────────────────────────────────────────────────────────

            Таблица 14.18. Коды функциональных клавиш.

     ───────────────────────────────────────────────────────────
       Константа    Значение           Константа    Значение
     ───────────────────────────────────────────────────────────
       kbF1         $3B00              kbF6         $4000
       kbF2         $3C00              kbF7         $4100
       kbF3         $3D00              kbF8         $4200
       kbF4         $3E00              kbF9         $4300
       kbF5         $3F00              kbF0         $4400
     ──────────────────────────────────────────────────────────

           Таблица 14.19.  Коды Shift-функциональная клавиша.

     ───────────────────────────────────────────────────────────
       Константа    Значение           Константа    Значение
     ───────────────────────────────────────────────────────────
       kbShiftF1    $5400              kbShiftF6    $5900
       kbShiftF2    $5500              kbShiftF7    $5A00
       kbShiftF3    $5600              kbShiftF8    $5B00
       kbShiftF4    $5700              kbShiftF9    $5C00
       kbShiftF5    $5800              kbShiftF0    $5D00
     ───────────────────────────────────────────────────────────

           Таблица 14.20. Коды Ctrl-функциональная клавиша.

     ───────────────────────────────────────────────────────────
       Константа    Значение           Константа    Значение
     ───────────────────────────────────────────────────────────
       kbCtrlF1     $5E00              kbCtrlF6     $6300
       kbCtrlF2     $5F00              kbCtrlF7     $6400
       kbCtrlF3     $6000              kbCtrlF8     $6500
       kbCtrlF4     $6100              kbCtrlF9     $6600
       kbCtrlF5     $6200              kbCtrlF0     $6700
     ───────────────────────────────────────────────────────────

            Таблица 14.21. Коды Alt-функциональная клавиша.

     ───────────────────────────────────────────────────────────
       Константа    Значение           Константа    Значение
     ───────────────────────────────────────────────────────────
       kbAltF1      $6800              kbAltF6      $6D00
       kbAltF2      $6900              kbAltF7      $6E00
       kbAltF3      $6A00              kbAltF8      $6F00
       kbAltF4      $6B00              kbAltF9      $7000
       kbAltF5      $6C00              kbAltF0      $7100
     ───────────────────────────────────────────────────────────

  См. также   evKeyDown, GetKeyEvent.


#Функция LongDiv
Функция LongDiv                                           Objects
═════════════════════════════════════════════════════════════════
  Объявление  function LongDiv(X: Longint; Y: Integer): Integer;
              inline($59/$58/$5A/$F7/$F9);

  Функция     Функция со встроенным ассемблерным кодом для быстрого
              деления, возвращающая целое значение X/Y.


#Функция LongMul
Функция LongMul                                           Objects
═════════════════════════════════════════════════════════════════
  Объявление  function LongMul(X, Y: Integer): Longint;
              inline($5A/$58/$F7/$EA);

  Функция     Функция со встроенным ассемблерным кодом для быстрого
              умножениия, возвращающая длинное целое значение X*Y.


#Тип LongRec
Тип LongRec                                               Objects
═════════════════════════════════════════════════════════════════
  Объявление  LongRec = record
                Lo, Hi: Word;
              end;

  Функция     Полезный тип записи для обработки переменных двойного
              слова.


#Функция LowMemory
Функция LowMemory                                          Memory
═════════════════════════════════════════════════════════════════
  Объявление  function LowMemory: Boolean;

  Функция     Возвращает True, если памяти мало, в противном случае
              False. True означает,  что вызов распределения памяти
              достиг пула  надежности.   Размер   пула   надежности
              определяется переменной LowMemSize.

  См. также   Главу 6, InitMemory, TView.Valid, LowMemSize.


#Переменная MaxBufMem
Переменная MaxBufMem                                       Memory
═════════════════════════════════════════════════════════════════
  Объявление  MaxBufMem: Word = 65536 div 16;

  Функция     Указывает максимальный  объем  памяти  в  16-байтовых
              параграфах, которая   может   быть  распределена  для
              кэш-буферов.

  См. также   GetBufMem, FreeBufMem.


#Переменная MaxCollectionSize
Переменная MaxCollectionSize                              Objects
═════════════════════════════════════════════════════════════════
  Объявление  MaxCollectionSize = 65520 div SizeOf(Pointer);

  Функция     Определяет максимальное   число   элементов,  которые
              может содержать  коллекция,  по  существу  это  число
              указателей, которое помещается  в  сегмент  памяти  в
              64К.


#Константа MaxViewWidth
Константа MaxViewWidth                                      Views
═════════════════════════════════════════════════════════════════
  Объявление  MaxViewWidth = 132;

  Функция     Устанавливает максимальную длину видимого элемента.

  См. также   поле TView.Size.


#Константа mbXXXX
Константа mbXXXX                                          Drivers
═════════════════════════════════════════════════════════════════
  Функция     Эти константы могут быть  использованы  при  проверке
              поля TEvent.Buttons записи события evMouse.

              if (Event.What = evMouseDown) and
              (Event.Button = mbLeftButton) then LeftButtonDown;

  Значения    Определены следующие константы:

              Таблица 14.22. Константы кнопки мышки.

   ───────────────────────────────────────────────────────────────
   Костанта    Значение  Назначение
   ───────────────────────────────────────────────────────────────
   mbLeftButton   $01  Установлено, если была нажата левая кнопка
   mbRightButton  $02  Установлено, если была нажата правая кнопка
   ───────────────────────────────────────────────────────────────

  См. также   GetMouseEvent.


#Функция MemAlloc
Функция MemAlloc                                           Memory
═════════════════════════════════════════════════════════════════
  Объявление  function MemAlloc(Size: Word): Pointer;

  Функция     Распределяет Size  байт  памяти  в  куче и возвращает
              указатель на блок.  Если блок требуемого  размера  не
              может быть распределен,  возвращается значение nil. В
              отличие от  стандартных  процедур   New   и   GetMem,
              MemAlloc не  позволяет  распределять  пул надежности.
              Блок распределенный с  помощью  MemAlloc  может  быть
              освобожден стандартной процедурой FreeMem.

  См. также   New, GetMem, Dispose, FreeMem, MemAllocSeg.


#Функция MemAllocSeg
Функция MemAllocSeg                                        Memory
═════════════════════════════════════════════════════════════════
  Объявление  function MemAllocSeg(Size: Word): Pointer;

  Функция     Распределяет блок  памяти  выровненный   на   границу
              сегмента. Соответствует   MemAlloc,   за  исключением
              того, что  часть  смещения  результирующего  значения
              указателя - 0.

  См. также   MemAlloc


#Переменная MenuBar
Переменная MenuBar                                            App
═════════════════════════════════════════════════════════════════
  Объявление  MenuBar: PMenuView = nil;

  Функция     Сохраняет указатель   на   полосу   меню    программы
              (наследник TMenuView).       Переменная       MenuBar
              инициализируется с   помощью    TProgram.InitMenuBar,
              которая вызывается через TProgram.Init.  Значение nil
              указывает, что программа не имеет полосы меню.


#Функция Message
Функция Message                                             Views
═════════════════════════════════════════════════════════════════
  Объявление function Message(Receiver: PView; What, Command: Word;
                              InfoPtr: Pointer): Pointer;

  Функция     Устанавливает событие-команду  с  аргументами   What,
              Command или InfoPtr,  затем,  если возможно, вызывает
              Receiver^.HandleEvent для  обработки  этого  события.
              Message возвращает nil, если Receiver - nil или, если
              событие не обработано успешно.  Если событие  успешно
              обработано (HandleEvent   возвращает  Event.What  как
              evNothing), функция     возвращает     Event.InfoPtr.
              Последний может  быть  использован  для  определения,
              каким видимым элементом обработано  событие.  Аргумет
              What обычно  устанавливается в evBroadcast. Например,
              по умолчанию TscrollBar.ScrollDraw посылает следующее
              сообщение в полосу скроллинга владельца:

            Message(Owner, evBroadcast, cmScrollBarChanged, @Self);

              Это сообщение    гарантирует,   что   соответствующие
              видимые элементы  перерисуются  как  только  значение
              полосы скроллинга изменится.

  См. также  TView.HandleEvent, тип TEvent, константы cmXXXX,
             константы evXXXX.


#Переменная MinWinSize
Переменная MinWinSize                                       Views
═════════════════════════════════════════════════════════════════
  Объявление  MInWinSize: TPoint = (X: 16; Y: 6);

  Функция     Определяет минимальный   размер   TWindow   или   его
              потомков. Значение  возвращается  в параметре Min при
              вызове TWindow.SizeLimits.    Любые    изменения    в
              MinWinSize будут  воздействовать  на  все окна,  если
              только метод SizeLimits окна не перекрыт.

  См. также   TWindow.SizeLimits


#Переменная MouseButtons
Переменная MouseButtons                                   Drivers
═════════════════════════════════════════════════════════════════
  Объявление  MouseButtons: Byte;

  Функция     Содержит текущее состояние кнопок мышки. MouseButtons
              корректируется  обработчиком  прерываний  мышки   как
              только  кнопка нажата или отпущена.  Константы mbXXXX
              могут быть использованы для проверки MouseButtons.

  См. также   константы mbXXX.


#Переменная MouseEvents
Переменная MouseEvents                                    Drivers
═════════════════════════════════════════════════════════════════
  Объявление  MouseEvents: Boolean = False;

  Функция     Устанавливается в  True,  если мышка инсталлирована и
              обнаружена InitEvents;    в     противном     случае,
              устанавливается в False. Если False, то все процедуры
              событий от мышки обходятся.

  См. также   GetMouseEvent.


#Переменная MouseIntFlag
Переменная MouseIntFlag                                   Drivers
═════════════════════════════════════════════════════════════════
  Объявление  MouseIntFlag: Byte;

  Функция     Используется внутри  драйвера  мышки  Turbo  Vision и
              видимыми элементами.   Устанавливается   как   только
              возникает событие от мышки.


#Переменная MouseWhere
Переменная MouseWhere                                     Drivers
═════════════════════════════════════════════════════════════════
  Объявление  MouseWhere: TPoint;

  Функция     Содержит текущую   позицию   мышки    в    глобальных
              координатах. MouseWhere  корректируется  обработчиком
              прерываний мышки   как   только   мышка   сдвигается.
              Используйте процедуру  MakeLocal для преобразования к
              локальным (относительно окна) координатам. MouseWhere
              передается в  обработчики  событий  вместе  с другими
              данными мышки.

  См. также   GetMouseEvent, методы GetEvent, MakeLocal


#Процедура MoveBuf
Процедура MoveBuf                                         Objects
═════════════════════════════════════════════════════════════════
  Объявление  procedure MoveBuf(var Dest; var Source; Attr: Byte;
                                Count: Word);

  Функция     Копирует текст   в   буфер   для   использования    с
              TView.WriteBuf или TView.WriteLine.  Dest должен быть
              TDrawBuffer (или  эквивалентным  массивом   слов)   и
              Source должен   быть   массивом   байт.   Count  байт
              копируются из Source в младшие  байты соответствующих
              слов в    Dest.    Старшие    байты   слов   в   Dest
              устанавливаются в Attr или остаются неизменными, если
              Attr - 0.

  См. также   тип TDrawBuffer, MoveChar, MoveCStr, MoveStr.


#Процедура MoveChar
Процедура MoveChar                                        Objects
═════════════════════════════════════════════════════════════════
  Объявление  procedure MoveChar(var Dest; C: Char; Attr: Byte;
                                 Count: Word);

  Функция     Копирует символы   в   буфер   для   использования  с
              TView.WriteBuf или TView.WriteLine.  Dest должен быть
              TDrawBuffer   (или   эквивалентным   массивом  слов).
              Младшие байты первых Count слов  Dest устанавливаются
              в  С  или  остаются  неизменными,  если  Ord(C)  - 0.
              Старшие  байты  слов  устанавливаются  в   Attr   или
              остаются неизменными, если Attr - 0.


  См. также   тип TDrawBuffer, MoveBuf, MoveCStr, MoveStr.


#Процедура MoveCStr
Процедура MoveCStr                                        Objects
═════════════════════════════════════════════════════════════════
  Объявление  procedure MoveCStr(var Dest; Str: String;
                                 Attrs: Word);

  Функция     Копирует строку   в   буфер   для   использования   с
              TView.WriteBuf или TView.WriteLine.  Dest должен быть
              TDrawBuffer  (или   эквивалентным   массивом   слов).
              Символы    в   Str   копируются   в   младшие   байты
              соответствующих  слов  в  Dest.  Старшие  байты  слов
              устанавливаются  в  Lo(Attr) или в Hi(Attr).  Символы
              "~" в  строке  используются  для  переключения  между
              двумя байтами атрибута, передаваемыми в слове Attr.

  См. также   тип TDrawBuffer, MoveChar, MoveBuf, MoveStr.


#Процедура MoveStr
Процедура MoveStr                                         Objects
═════════════════════════════════════════════════════════════════
  Объявление  procedure MoveStr(var Dest; Str: String;
                                Attr: Byte);

  Функция     Копирует строку   в   буфер   для   использования   с
              TView.WriteBuf или TView.WriteLine.  Dest должен быть
              TDrawBuffer   (или   эквивалентным   массивом  слов).
              Символы   в   Str   копируются   в   младшие    байты
              соответствующих  слов  в  Dest.  Старшие  байты  слов
              устанавливаются в Attr или остаются неизменными, если
              Attr - 0.

  См. также   тип TDrawBuffer, MoveChar, MoveCStr, MoveBuf.


#Функция NewItem
Функция NewItem                                             Menus
═════════════════════════════════════════════════════════════════
  Объявление function NewItem(Name, Param: TMenuStr; KeyCode: Word;
                              Command: Word; AHelpCtx: Word; Next:
                              PMenuItem): PMenuItem;

  Функция     Распределяет и возвращает указатель на  новую  запись
              TMenuItem,  которая представляет элемент меню (NewStr
              используется для распределения полей указателей строк
              Name  и  Param).  Параметр  Name должен быть непустой
              строкой и параметр  Command  должен  быть  ненулевым.
              Вызовы NewItem,  NewLine,  NewMenu и NewSubMenu могут
              быть вложенными для создания полного  дерева  меню  в
              одном операторе Паскаля; для примеров см. главу 2.

  См. также   TApplication.InitMenuBar, тип TMenuView, NewLine,
              NewMenu, NewSubMenu.


#Функция NewLine
Функция NewLine                                             Menus
═════════════════════════════════════════════════════════════════
  Объявление  function NewLine(Next: PMenuItem): PMenuItem;

  Функция     Распределяет и возвращает указатель на  новую  запись
              TMenuItem, которая представляет  отдельную  строку  в
              окне меню.

  См. также   TApplication.InitMenuBar, тип TMenuView, NewMenu,
              NewSubMenu, NewItem.


#Функция NewMenu
Функция NewMenu                                             Menus
═════════════════════════════════════════════════════════════════
  Объявление  function NewMenu(Items: PMenuItem): Pmenu;

  Функция     Распределяет и возвращает указатель на  новую  запись
              TMenu. Поля Items и Default записи  устанавливаются в
              значение данное параметром Items.

  См. также   TApplication.InitMenuBar, тип TMenuView, NewLine,
              NewSubMenu, NewItem.


#Функция NewSItem
Функция NewSItem                                          Dialogs
═════════════════════════════════════════════════════════════════
  Объявление function NewSItem(Str: String; ANext: PSItem): PSItem;

  Функция     Распределяет и  возвращает  указатель на новую запись
              TSItem.  Поля Value и Next записи  устанавливаются  в
              NewStr(Str) и ANext соответственно.  Функция NewSItem
              и запись типа TSItem позволяют  легко  конструировать
              связанные списки строк; для примера см. главу 4.


#Функция NewStatusDef
Функция NewStatusDef                                        Menus
═════════════════════════════════════════════════════════════════
  Объявление  function NewStatusDef(AMin, AMax: Word; AItems:
                       PStatusItem; ANext: PStatusDef): PStatusDef;

  Функция     Распределяет и  возвращает  указатель на новую запись
              TStatusDef.   Запись   инициализируется   с   данными
              значениями     параметров.     Вызовы    NewStatusDef
              NewStatusKey  могут  быть  вложенными  для   создания
              полных  описаний  строк  статуса  в  одном  операторе
              Паскаля; для примеров см. главу 2.

  См. также   TApplication.InitStatusLine, TStatusLine,
              NewStatusKey.


#Функция NewStatusKey
Функция NewStatusKey                                        Menus
═════════════════════════════════════════════════════════════════
  Объявление  function NewStatusKey(AText: String; AKeyCode: Word;
                  ACommand: Word; ANext: PStatusItem): PStatusItem;

  Функция     Распределяет и  возвращает  указатель на новую запись
              TStatusItem.  Запись инициализируется  со  значениями
              параметров (NewStr  используется  для   распределения
              поля  указателя Text).  Если AText пусто (результатом
              будет nil в поле Text),  элемент статуса  скрывается,
              но будет обеспечивать, однако, отображение из данного
              KeyCode в Command.

  См. также   TApplication.InitStatusLine, TStatusLine,
              NewStatusDef.


#Функция NewStr
Функция NewStr                                            Objects
═════════════════════════════════════════════════════════════════
  Объявление  function NewStr(S: String): PString;

  Функция     Функция динамической строки. Если S - нулевая, NewStr
              возвращает nil;  в противном  случае,  распределяются
              Length(S)+1 байт,  содержащие  копию S и возвращается
              указатель на первый байт.
              Строки создаваемые  с  помощью  NewStr   могут   быть
              освобождены с помощью DisposeStr.

  См. также   DisposeStr.


#Функция NewSubMenu
Функция NewSubMenu                                          Menus
═════════════════════════════════════════════════════════════════
  Объявление  function NewSubMenu(Name: TmenuStr; AHelpCtx: Word;
                       SubMenu: PMenu; Next: PMenuItem): PMenuItem;

  Функция     Распределяет и возвращает указатель на  новую  запись
              TMenuItem,   которая   представляет  подменю  (NewStr
              используется для распределения поля указателя Name).

  См. также   TApplication.InitMenuBar,TMenuView, NewLine, NewItem.


#Константы ofXXXX
Константы ofXXXX                                            Views
═════════════════════════════════════════════════════════════════
  Функция
              Эти мнемоники  используются  для  ссылок  на  битовые
              позиции поля TView.Options.  Установка позиции бита в
              1 указывает,  что  видимый  элемент  имеет  отдельный
              атрибут; очистка  битовой   позиции   означает,   что
              атрибут отключен или запрещен. Например,

              MyWindow.Options := ofTileable + ofSelectable;

  Значения    Определены следующие опции флагов:

                   Таблица 14.23. Опции флагов.

───────────────────────────────────────────────────────────────────
 Константа      Назначение
───────────────────────────────────────────────────────────────────
 ofSelectable   Установлен,  если  видимый  элемент  выбирает  себя
                автоматически   (см.    sfSelectable),    например,
                отметкой мышкой в видимом элементе или клавишей Tab
                в диалоговом окне.
 ofTopSelect    Установлен,  если  видимый элемент помещается перед
                всеми другими равными видимыми элементами, когда он
                выбран. Когда  бит  ofTopSelect  установлен,  вызов
                TView.Select соответствует  вызову TView.MakeFirst.
                Окна (TWindow  и  его  потомки)  по умолчанию имеют
                этот бит   установленным,   что    заставляет    их
                располагаться перед  всеми другими окнами на панели
                экрана, когда    они    выбираются.    См.    также
                TView.Select, TGroup.MakeFirst.
 ofFirstClick   Если очищен,  отметка  мышкой,   которая   выбирает
                видимый элемент, не имеет эффекта. Если установлен,
                такая отметка мышкой  будет  работать  как  обычный
                отметка мышкой  после выбора видимого элемента.  Не
                имеет эффекта, если ofSelectable не установлен. См.
                также TView.HandleEvent, sfSelect, ofSelectable.
 ofFramed       Установлен, если  видимый  элемент   имеет   рамку.
                TWindow и   его  потомки  имеют  TFrame,  как  свой
                последний подэлемент.  Когда видимый элемент рисует
                себя, TFrame  рисует  рамку  вокруг  любого другого
                подэлемента, у которого установлен бит ofFrame. См.
                также TFrame, TWindow.
 ofPreProcess   Установлен, если видимый элемент  получает активные
                события до  того,  как  они  были посланы активному
                элементу. В  противном  случае  очищен.  См.  также
                sfFocused, ofPostProcess, TGroup.Phase.
 ofPostProcess  Установлен, если видимый элемент  получает активное
                событие в  случае,  когда активный элемент не может
                их обработать.  В противном случае  очищается.  См.
                также sfFocused, ofPreProcess, TGroup.Phase.
 ofBuffered     Используется только    для     объектов     TGroup.
                Установлен, если  кэш-буфер  распределяет доступную
                память. Буфер группы содержит образ экрана для всей
                группы, таким     образом    увеличивая    скорость
                перерисовки. При   отсутствии  буфера,  TGroup.Grow
                вызывает методы каждого подэлемента  DrawView. Если
                впоследствии New   и   GetMem   не  могут  получить
                достаточно памяти,  буфера группы будут освобождать
                память. См. также GetBufMem.
 ofTileable     Установлен, если  панель  экрана  может расположить
                этот видимый  элемент  черепицей  (или   каскадом).
                Обычно используется только с объектами TWindow.
 ofCenterX      Установлен, если видимый  элемент  центрируется  по
                оси Х  своего  владельца  при  вставке  в  группу с
                использованием TGroup.Insert.
 ofCenterY      Установлен, если видимый  элемент  центрируется  по
                оси Y  своего  владельца  при  вставке  в  группу с
                использованием TGroup.Insert.
 ofCentered     Установлен, если видимый  элемент  центрируется  по
                обоим осям своего владельца при вставке в  группу с
                использованием TGroup.Insert.
───────────────────────────────────────────────────────────────────

     Биты Options определены:

                          Рис. 14.4. Флаги битов Options.

    ┌──────── TView.Options ────────┐
    msb                           lsb
                 ┌─┬─────────────────── ofCentered    = $0300
    ╔═╤═╤═╤═╤═╤═╤╧╤╧╤═╤═╤═╤═╤═╤═╤═╤═╗
    ╚╤╧═╧═╧═╧═╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╝
     └────┬────┘ │ │ │ │ │ │ │ │ │ └─── ofSelectable  = $0001
          │      │ │ │ │ │ │ │ │ └───── ofTopSelect   = $0002
    Неопределены │ │ │ │ │ │ │ └─────── ofFirstClick  = $0004
                 │ │ │ │ │ │ └───────── ofFramed      = $0008
                 │ │ │ │ │ └─────────── ofPreProcess  = $0010
                 │ │ │ │ └───────────── ofPostProcess = $0020
                 │ │ │ └─────────────── ofBuffered    = $0040
                 │ │ └───────────────── ofTileable    = $0080
                 │ └─────────────────── ofCenterX     = $0100
                 └───────────────────── ofCenterY     = $0200

  См. также  TView.Options.


#Тип PChar
Тип PChar                                                 Objects
═════════════════════════════════════════════════════════════════
  Объявление  PChar = ^Char;

  Функция     Определяет указатель на символ.


#Переменная PositionalEvents
Переменная PositionalEvents                                 Views
═════════════════════════════════════════════════════════════════
  Объявление  PositionalEvents:Word = evMouse;

  Функция     Определяет классы   событий   как   позиционированные
              события. Переменные FocusedEvents  и PositionalEvents
              используются TGroup.HandleEvent,   чтобы   установить
              соответствие события подэлементам группы.  Если класс
              события не      принадлежит     FocusedEvents     или
              PositionalEvents, то оно интерпретируется  как  общее
              событие.

  См. также   TGroup.HandleEvent, тип TEvent, константы события
              evXXXX, переменная Focused Events.


#Процедура PrintStr
Процедура PrintStr                                        Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure PrintStr(S: String);

  Функция     Печатает строку S на экране,  используя вызов функции
              DOS 40H для записи в  стандартное  устройство  вывода
              DOS. Имеет  тот  же  эффект,  что  и  Write  (S),  за
              исключением того,    что    PrintStr    не    требует
              редактирования с    программой   библиотеки   времени
              выполнения файлового ввода/вывода.


#Тип PString
Тип PString                                               Objects
═════════════════════════════════════════════════════════════════
  Объявление  PString = ^String;

  Функция     Определяет указатель на строку.


#Тип PtrRec
Тип PtrRec                                                Objects
═════════════════════════════════════════════════════════════════
  Объявление  PtrRec = record
                Ofs, Seg: Word;
              end;

  Функция     Запись, содержащая  значение  сегмента   и   смещения
              указателя.


#Процедура RegisterDialogs
Процедура RegisterDialogs                                 Dialogs
═════════════════════════════════════════════════════════════════
  Объявление  procedure RegisterDialogs;

  Функция     Вызывает RegisterType для каждого  стандартного  типа
              объекта, определенного в модулях TDialog, TInputLine,
              TButton, TCluster,    TRadioButtons,     TCheckBoxes,
              TListBox, TStaticText,  TParamText, TLabel, THistory.
              Это позволяет использовать все эти объекты  с потоком
              В/В.

  См. также   TStreamRec, RegisterTypes.


#Процедура RegisterType
Процедура RegisterType                                    Objects
═════════════════════════════════════════════════════════════════
  Объявление  procedure RegisterType(var S: TStreamRec);

  Функция     Тип объекта Turbo Vision должен  быть зарегистрирован
              перед использованием  в потоке В/В.  Стандартные типы
              объектов уже   зарегистрированы    с    ObjTypes    в
              резервированном диапазоне 0..99. RegisterType создает
              элемент в связанном списке записей TStreamRec.

  См. также   TStream.Get, TStreamPut, TStreamRec.


#Переменная RepeatDelay
Переменная RepeatDelay                                    Drivers
═════════════════════════════════════════════════════════════════
  Объявление  RepeatDelay = 8;

  Функция     Определяет число   квантов   времени   (1/18.2  часть
              секунды), которое   должно   быть   известно    перед
              генерацией событий  evMouseAuto.  Временной  интервал
              между событиями evMouseAuto  всегда  составляет  один
              квант.

  См. также   DoubleDelay, GetMouseEvent, константы evXXXX.


#Переменная SaveCtrlBreak
Переменная SaveCtrlBreak                                  Drivers
═════════════════════════════════════════════════════════════════
  Объявление  SaveCtrlBreak: Boolean = False;

  Функция     Процедура InitSysError сохраняет состояние Ctrl-Break
              DOS, проверяя   эту   переменную   перед  запрещением
              проверки Ctrl-Break DOS. DoneSysError восстанавливает
              Ctrl-Break DOS, проверяя значение, сохраненное в этой
              переменной.

  См. также   InitSysError, DoneSysError


#Константы sbXXXX
Константы sbXXXX                                            Views
═════════════════════════════════════════════════════════════════
  Функция
              Эти константы     определяют     различные    области
              TScrollBar, в которых воспринимется отметка мышкой.

              Функция TScrollBar.ScrollStep            осуществляет
              преобразование этих    констант    в   действительные
              значения шага  скроллинга.   Хотя   она   определена,
              константа sbIndicator   никогда   не   передается   в
              TScrollBar.ScrollStep.

                   Таблица 14.24. Константы полосы скроллинга.

     ───────────────────────────────────────────────────────────
      Константа  Значение  Назначение
     ───────────────────────────────────────────────────────────
     sbLeftArrow    0      Левая стрелка горизонтальной полосы
                           скроллинга.
     sbRightArrow   1      Правая стрелка горизонтальной полосы
                           скроллинга.
     sbPageLeft     2      Левая страничная область горизонтальной
                           полосы скроллинга.
     sbPageRight    3      Правая страничная область горизонтальной
                           полосы скроллинга.
     sbUpArrow      4      Стрелка вверх вертикальной полосы
                           скроллинга.
     sbDownArrow    5      Стрелка вниз вертикальной полосы
                           скроллинга.
     sbPageUp       6      Верхняя страничная область вертикальной
                           полосы скроллинга.
     sbPageDown     7      Нижняя страничная область вертикальной
                           полосы скроллинга.
     sbIndicator    8      Индикатор на полосе скроллинга.
     ───────────────────────────────────────────────────────────

                          Рис. 14.5. Полоса скроллинга.


                                            ў── sbUpArrow
                                           ▒
                                           ▒ ў── sbPageUp
                                           ▒
                     sbIndicator ────────Ў ■
                     │                     ▒
                     │                     ▒
                     │                     ▒
                     │                     ▒ ў── sbPageDown
                     │                     ▒
                     │                     ▒
                     ∙                      ў── sbDownArrow
     ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒■▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒─┘
     °          °           °            °
     │          │           │            │
     │      sbPageLeft  sbPageRight      │
 sbLeftArrow                       sbRightArrow


     Следующие значения   могут    быть    переданы    в    функцию
TWindow.StandardScrollBar:


                   Таблица 14.25. Константы StandardScrollBar.

     ───────────────────────────────────────────────────────────
      Константа        Значение  Назначение
     ───────────────────────────────────────────────────────────
     sbHorizontal      $0000   Полоса скроллинга горизонтальна.
     sbVertical        $0001   Полоса скроллинга вертикальна.
     sbHandleKeyboard  $0002   Полоса скроллинга реагирует на
                               команды клавиатуры.
     ───────────────────────────────────────────────────────────

  См. также  TScrollBar, TScrollBar.TScrollStep.


#Переменная  ScreenBuffer
Переменная  ScreenBuffer                                  Drivers
═════════════════════════════════════════════════════════════════
  Объявление  ScreenBuffer: Pointer;

  Функция     Указатель на буфер экрана.

  См. также   InitVideo.


#Переменная ScreenHeight
Переменная ScreenHeight                                   Drivers
═════════════════════════════════════════════════════════════════
  Объявление  ScreenHeight: Byte;

  Функция     Устанавливается InitVideo  и  SetVideoMode  в  высоту
              экрана в строках для текущего экрана.

  См. также   InitVideo, SetVideoMode, ScreenWidth.


#Переменная ScreenMode
Переменная ScreenMode                                     Drivers
═════════════════════════════════════════════════════════════════
  Объявление  ScreenMode: Word;

  Функция     Хранит текущий видеорежим. Изначально устанавливается
              инициализационным кодом  модуля  Drivers,  ScreenMode
              может быть   изменена   использованием  SetVideoMode.
              Значения ScreenMode      обычно       устанавливаются
              использованием мнемоник режима экрана smXXXX.


  См. также   InitVideo, SetVideoMode, smXXXX.


#Переменная ScreenWidth
Переменная ScreenWidth                                    Drivers
═════════════════════════════════════════════════════════════════
  Объявление  ScreenWidth: Byte;

  Функция     Устанавливается InitVideo   в  ширину  экрана  (число
              символов с строке).

  См. также   InitVideo.


#Тип SelectMode
Тип SelectMode                                              Views
═════════════════════════════════════════════════════════════════
  Объявление SelectMode = (NormalSelect, EnterSelect, LeaveSelect);

  Функция     Используется внутренне Turbo Vision.

  См. также   TGroup.ExecView, TGroup.SetCurrent.


#Процедура SetVideoMode
Процедура SetVideoMode                                    Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure SetVideoMode(Mode: Word);

  Функция     Устанавливает видеорежим.  Mode  одна   из   констант
              smCO80, smBW80  или smMono с необязательнвм smFont8x8
              добавленным для выбора 43 или 50-строчного режима EGA
              или VGA.    SetVideoMode   инициализирует   некоторые
              переменные как InitVideo (за  исключением  переменной
              StartupMode, на   которую   это   не   воздействует).
              SetVideoMode обычно не  вызывается  напрямую.  Вместо
              этого используйте TApplication.SetScreenMode, которая
              также устанавливает палитру программы.

  См. также   InitVideo, константы smXXXX,
              TApplication.SetScreenMode.


#Константы sfXXXX
Константы sfXXXX                                            Views
═════════════════════════════════════════════════════════════════
  Функция     Эти константы    используются    для    доступа     к
              соответствующим битам    полей    TView.State.   Поля
              TView.State никогда не  должны  изменяться  напрямую;
              вместо этого    Вы    должны    использовать    метод
              TView.SetState.

  Значения    Определены следующие флаги состояния:

              Таблица 14.26. Константы флагов состояния.

───────────────────────────────────────────────────────────────────
 Константа    Назначение
───────────────────────────────────────────────────────────────────
 sfVisible    Установлен,  если   видимый  элемент  виден  в  своем
              владельце. Видимые элементы по  умолчанию  sfVisible.
              Методы TView.Show  и  TView.Hide могут использоваться
              для модификации  sfVisible.  При  sfVisible   видимый
              элемент не обязательно видим на экране, поскольку его
              владелец может быть невидим.  Для проверки  видимости
              на экране,   проверьте  бит  sfExposed  или  вызовите
              функцию TView.Exposed.
 sfCursorVis  Установлен, если  курсор  видимого элемента видим,  в
              противном случае очищен.  По умолчанию очищен. Методы
              TView.ShowCursor     и     TView.HideCursor     могут
              использоваться для модификации sfCursorVis.
 sfCursorIns  Установлен, если  курсор видимого элемента - сплошной
              блок,  очищен, если курсор видимого элемента - линия.
              По   умолчанию  очищен.  Методы  TView.BlockCursor  и
              TView.NormalCursor    могут    использоваться     для
              модификации sfCursorIns.
 sfShadow     Установлен, если  видимый  элемент  имеет   тень,   в
              противном случае, очищен.
 sfActive     Установлен, если видимый элемент  это  активное  окно
              или подэлемент активного окна.
 sfSelected   Установлен, если   видимый   элемент   это    текущий
              выбранный подэлемент  внутри своего владельца. Каждый
              объект TGroup имеет поле Current,  которое  указывает
              на текущий   выбранный   подэлемент  (или  nil,  если
              подэлементов не  выбрано).  Может  быть  только  один
              выбранный подэлемент в TGroup.
 sfFocused    Установлен, если  видимый  элемент   сфокусированный.
              Видимый элемент  - сфокусированный,  если он выбран и
              все владельцы  выше  его  также  выбраны,  т.е.  если
              видимый элемент   находится   в   цепи   образованной
              указателями Current   всех    TGroup,    начиная    с
              TApplication (самый   верхний   видимый   элемент   в
              иерархии видимых    элементов).   Последний   видимый
              элемент цепи  это  конечное   назначение   для   всех
              сфокусированных событий.
 sfDragging   Установлен, если видимый элемент можно растягивать, в
              противном случае, очищен.
 sfDisabled   Установлен, если  видимый  элемент запрещен;  очищен,
              если разрешен.
 sfModal      Установлен, если  видимый элемент - модальный. Всегда
              существует точно один элемент в выполняемой  на Turbo
              Vision программе,  обычно,  объекты TAppplication или
              TDialog. Когда видимый элемент  начинает  выполняться
              (через вызов    ExecView),   этот   видимый   элемент
              становится модальным.   Модальный   видимый   элемент
              представляет вершину    (корень)   активного   дерева
              событий, получая события и управляя ими  до  тех  пор
              пока не  вызван  его  метод EndModal.  Во время этого
              "локального" цикла событий события  передаются нижним
              подэлементам в  дереве видимых подэлементов.  События
              от этих  нижних  видимых  элементов   передаются   по
              дереву, но не далее модального видимого элемента. См.
              также    sfSelected,    sfFocused,    TView.SetState,
              TView.HandleEvent, TGroup.ExecView.
 sfExposed    Установлен, если  у  видимого  элемента  прямой   или
              косвенный владелец    -    объект    TApplication   и
              следовательно он может быть виден  на  экране.  Метод
              TView.Exposed использует   этот  флаг  при  отсечении
              (клиппинге), определяя какая часть  видимого элемента
              действительно видна     на    экране.    См.    также
              TView.Exposed.
───────────────────────────────────────────────────────────────────

  Значения    Биты флага состояния определены так:

              Рис. 14.6. Биты флага состояния.


      ┌────── TView.State Flags ──────┐
      msb                           lsb
      ╔═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╗
      ╚═╧═╧═╧═╧╤╧═╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╝
               │   │ │ │ │ │ │ │ │ │ └─── sfVisible   = $0001
               │   │ │ │ │ │ │ │ │ └───── sfCursorVis = $0002
               │   │ │ │ │ │ │ │ └─────── sfCursorIns = $0004
               │   │ │ │ │ │ │ └───────── sfShadow    = $0008
               │   │ │ │ │ │ └─────────── sfActive    = $0010
               │   │ │ │ │ └───────────── sfSelected  = $0020
               │   │ │ │ └─────────────── sfFocused   = $0040
               │   │ │ └───────────────── sfDragging  = $0080
               │   │ └─────────────────── sfDisabled  = $0100
               │   └───────────────────── sfModal     = $0200
               └───────────────────────── sfExposed   = $0800

  См. также  TView.State.


#Переменная ShadowAttr
Переменная ShadowAttr                                       Views
═════════════════════════════════════════════════════════════════
  Объявление  ShadowAttr: Byte = $80;

  Функция     Эта переменная   управляет   цветом  тени,  доступной
              видимым элементам  с  установленным  битом  sfShadow.
              Тень это    обычно    разреженная    серая   область,
              отображаемая прямо  от  краев  видимого  элемента   с
              иллюзией 3-D.

  См. также   ShadowSize.


#Переменная ShadowSize
Переменная ShadowSize                                       Views
═════════════════════════════════════════════════════════════════
  Объявление  ShadowSize: TPoint = (X: 2; Y: 1);

  Функция     Это значение управляет размером тени, кторая доступна
              с  установленным  битом  sfShadow.  Тень  это  обычно
              разреженная  серая  область,  отображаемая  прямо  от
              краев видимого элемента с иллюзией 3-D. По умолчанию,
              размер тени - 2 по оси X и 1 по Y.
              TProgram.InitScreen инициализирует  ShadowSize:  если
              режим экрана равен smMono, ShadowSize устанавливается
              в (0,  0). Иначе ShadowSize устанавливается в (2, 1),
              если только   не   установлен   smFont8x8   (43-  или
              50-строчный режим),  в этом случае устанавливается  в
              (1, 1).


  См. также   TProgram.InitScreen, ShadowAttr.


#Переменная ShowMarkers
Переменная ShowMarkers                                    Drivers
═════════════════════════════════════════════════════════════════
  Объявление  ShowMarkers: Boolean;

  Функция     Используется для   указания   будут   ли   индикаторы
              размещаться вокруг   активных  элементов  управления.
              TProgram.InitScreen устанавливает ShowMarkers в True,
              если монохромный  видеорежим,  иначе в False.  Однако
              значение может быть установлено, при необходимости, в
              цветной или черно-белый режим.

  См. также   TProgram.InitScreen, переменная SpecialChars.


#Процедура ShowMouse
Процедура ShowMouse                                       Drivers
═════════════════════════════════════════════════════════════════
  Объявление  procedure ShowMouse;

  Функция     ShowMouse уменьшает "счетчик невидимости"  в драйвере
              мышки и  делает  курсор  мышки  видимым  если счетчик
              равен 0.

  См. также   InitEvents, DoneEvents, HideMouse.


#Константы smXXXX
Константы smXXXX                                          Drivers
═════════════════════════════════════════════════════════════════
  Функция     Эти мнемонические     константы     используются    с
              SetVideoMode для установки  соответствующего значения
              видеорежима в ScreenMode.

  Значения    В Turbo Vision определены следующие режимы экрана:

              Таблица 14.27. Константы режимов экрана.

     ───────────────────────────────────────────────────────────
     Константа Значение Назначение
     ───────────────────────────────────────────────────────────
     smBW80      $0002  Черно-белый режим на цветном
     smCO80      $0003  Цветной режим
     smMono      $0007  Монохромный режим
     smFont8x8   $0100  43- или 50-строчный режим
     ───────────────────────────────────────────────────────────

  См. также  SetVideoMode, ScreenMode.


#Переменная SpecialChars
Переменная SpecialChars                                     Views
═════════════════════════════════════════════════════════════════
  Объявление  SpecialChars: array[0..5] of Char = (#175, #174,
                            #26, #27, ' ', ' ');

  Функция     Определяет символы   индикатора   используемые    для
              подсветки активного  видимого  элемента в монохромном
              видеорежиме. Эти    символы    отображаются,     если
              переменная ShowMarkers - True.

  См. также   переменную ShowMarkers.


#Константы stXXXX
Константы stXXXX                                          Objects
═════════════════════════════════════════════════════════════════
  Функция     Существует два набора констант начинающихся  с  "st",
              которые используются потоками Turbo Vision.

  Значения    Следующие костанты режима используются в TDosStream и
              TBufStream для определения режима доступа к файлу при
              открытии файла в потоках Turbo Vision:

              Таблица 14.28. Режимы доступа к потоку.

     ───────────────────────────────────────────────────────────
     Константа  Значение  Назначение
     ───────────────────────────────────────────────────────────
     stCreate     $3C00   Создать новый файл
     stOpenRead   $3D00   Открыть файл только на чтение
     stOpenWrite  $3D01   Открыть файл только на запись
     stOpen       $3D02   Открыть файл на чтение/запись
     ───────────────────────────────────────────────────────────

              Следующие значения  возвращаются TStream.Error в поле
              TStream.ErrorInfo, когда возникает ошибка потока:

              Таблица 14.29. Коды ошибок потока.

     ───────────────────────────────────────────────────────────
     Константа  Значение  Назначение
     ───────────────────────────────────────────────────────────
     stOk            0   Нет ошибки
     stError        -1   Ошибка доступа
     stInitError    -2   Нельзя инициализировать поток
     stReadError    -3   Чтение за концом потока
     stWriteError   -4   Нельзя расширить поток
     stGetError     -5   Get для незарегистрированного типа объекта
     stPutError     -6   Put для незарегистрированного типа объекта
     ───────────────────────────────────────────────────────────

  См. также  TStream.


#Переменная  StartupMode
Переменная  StartupMode                                   Drivers
═════════════════════════════════════════════════════════════════
  Объявление  StartupMode: Word;

  Функция     Программа InitVideo сохраняет текущий режим  экрана в
              этой переменной   до   переключения  в  режим  экрана
              заданный в  ScreenMode.   DoneVideo   восстанавливает
              режим экрана в значение запомненное в StartupMode.

  См. также   InitVideo, DoneVideo, ScreenMode.


#Переменная StatusLine
Переменная StatusLine                                         App
═════════════════════════════════════════════════════════════════
  Объявление  StatusLine: PStatusLine = nil;

  Функция     Сохраняет указатель  на  строку  статуса   программы.
              Переменная StatusLine        инициализируется       в
              TProgram.InitStatusLine, вызываемой из TProgram.Init.
              Значение nil  указывает,  что  в программе нет строки
              статуса.

  См. также   InitStatusLine.


#Переменная StreamError
Переменная StreamError                                    Objects
═════════════════════════════════════════════════════════════════
  Объявление  StreamError: Pointer = nil;

  Функция     Если не  nil,  StreamError  указывает  на  процедуру,
              которая вызывается   методом   Error    потока    при
              возникновении ошибки. Процедура должна быть дальней и
              использовать var параметр типа  TStream,  т.е.  иметь
              объявление:

              procedure MyStreamErrorProc(var S: TStream); far;

              StreamError позволяет  Вам  глобально  перекрыть  всю
              обработку ошибок  потока.  Чтобы  изменит   обработку
              ошибок для   определенного  типа  потока,  Вы  должны
              перекрыть метод Error этого потока.


#Переменная  SysColorAttr
Переменная  SysColorAttr                                  Drivers
═════════════════════════════════════════════════════════════════
  Объявление  SysColorAttr: Word = $4E4F;

  Функция     Цвет по  умолчанию  используется для вывода сообщений
              об ошибках   обработчиком   системных   ошибок.    На
              монохромных системах  SysMonoAttr используется вместо
              SysColorAttr. Сообщения об ошибках с опцией отменить/
              восстановить отображаются     в    строке    статуса.
              Предыдущая строка     статуса      сохраняется      и
              восстанавливается, когда условия разрешены.

  См. также    SystemError, SysMonoAttr.


#Переменная SysErrActive
Переменная SysErrActive                                   Drivers
═════════════════════════════════════════════════════════════════
  Объявление  SysErrActive: Boolean = False;

  Функция     Указывает, активен ли обработчик системных  ошибок  в
              данный момент.    Устанавливается    в   True   через
              InitSysError.

#Переменная SysErrorFunc
Переменная SysErrorFunc                                   Drivers
═════════════════════════════════════════════════════════════════

  Объявление  SysErrorFunc: TSysErrorFunc = SystemError;

  Функция     SysErrorFunc -  это  функция  системной  ошибки  типа
              TSysErrorFunc. Функция  системной  ошибки  вызывается
              при возникновении  критической  ошибки  DOS или когда
              требуется смена диска на компьютере  с  одним  гибким
              диском. ErrorCode  -  это  значение  от 0 до 15,  как
              определено в таблице  14.30,  а  Drive  -  это  номер
              устройства (0=А,  1=В и т.д.) для дисковых ошибок. По
              умолчанию функция системной ошибки - это SystemError.
              Вы можете  установить  свою функцию системной ошибки,
              назначая ее в SysErrorFunc.  Функции системных ошибок
              не могут перекрываться.

                  Таблица 14.30. Коды функции системной ошибки.

     ───────────────────────────────────────────────────────────
        Код ошибки             Значение
     ───────────────────────────────────────────────────────────
        0..12         Коды критических ошибок DOS
         13           Плохой образ таблицы распределения файлов
         14           Ошибка доступа к устройству
         15           Указание смены диска
     ───────────────────────────────────────────────────────────

              Возвращаемые значения функции:

                 Таблица 14.31.  Значения, возвращаемые функцией
                                системной ошибки.

     ───────────────────────────────────────────────────────────
        Возвращаемое значение          Назначение
     ───────────────────────────────────────────────────────────
               0               Пользователь запросил повтор
               1               Пользователь запросил отмену
     ───────────────────────────────────────────────────────────

  См. также  функцию SystemError, тип TSysErrorFunc,
             процедуру InitSysError.



#Переменная SysMonoAttr
Переменная SysMonoAttr                                    Drivers
═════════════════════════════════════════════════════════════════
  Объявление  SysMonoAttr: Word = $7070;

  Функция     Атрибут по   умолчанию   используется   для    вывода
              сообщений об  ошибках  обработчиком системных ошибок.
              На цветных системах SysColorAttr  используется вместо
              SysMonoAttr. Сообщения  об ошибках с опцией отменить/
              восстановить   отображаются   в    строке    статуса.
              Предыдущая     строка     статуса    сохраняется    и
              восстанавливается, когда условия разрешены.

  См. также   SystemError, SysColorAttr.


#Функция SystemError
Функция SystemError                                       Drivers
═════════════════════════════════════════════════════════════════
  Объявление  function SystemError(ErrorCode: Integer;
                                   Drive: Byte): Integer;

  Функция     Функция системной ошибки по умолчанию. Она отображает
              одно  из  следующих  сообщений  об  ошибке  в  строке
              статуса в   зависимости   от   значения    ErrorCode,
              используя  атрибуты цвета,  определяемые SysColorAttr
              или SysMonoAttr.

                    Таблица 14.32. Сообщения функции SystemError.

     ───────────────────────────────────────────────────────────
      Код ошибки                  Сообщение
     ───────────────────────────────────────────────────────────
         0          Disk is write-protected in drive X
                    Драйвер X диска защищен от записи
         1          Critical disk error on drive X
                    Критическая ошибка диска на драйвере X
         2          Disk is not ready in drive X
                    Драйвер X диска не готов
         3          Critical disk error on drive X
                    Критическая ошибка диска на драйвере X
         4          Data integrity error on drive X
                    Ошибка данных на драйвере X
         5          Critical disk error on drive X
                    Критическая ошибка диска на драйвере X
         6          Seek error on drive X
                    Ошибка позиционирования на драйвере X
         7          Unknown media type in drive X
                    Неизвестный тип носителя в драйвере X
         8          Sector not found on drive X
                    Не найден сектор на драйвере X
         9          Printer out of paper
                    Нет бумаги на принтере
        10          Write fault on drive X
                    Ошибка записи на драйвере X
        11          Read fault on drive X
                    Ошибка чтения на драйвере X
        12          Hardware failure on drive X
                    Аппаратная неисправность на драйвере X
        13          Bad memory image of FAT detected
                    В FAT обнаружен неверный образ памяти
        14          Device access error
                    Ошибка доступа к устройству
        15          Insert diskette in drive X
                    Вставьте дискету в драйвер X
     ───────────────────────────────────────────────────────────

  См. также  SysColorAttr, SysMonAttr, SysErrorFunc.


#Тип TByteArray
Тип TByteArray                                            Objects
═════════════════════════════════════════════════════════════════
  Объявление  TByteArray = array[0..32767] of Byte;

  Функция     Тип массива   байт   для   общего  использования  при
              приведении типа.

  См. также   TStringListMaker.


#Тип TCommandSet
Тип TCommandSet                                             Views
═════════════════════════════════════════════════════════════════
  Объявление  TCommandSet = set of Byte;

  Функция     TCommandSet полезен    для   хранения   произвольного
              множества, содержащего до 256  команд.  Он  позволяет
              выполнить простое   тестирование,   соответствует  ли
              данная команда определенному  критерию  в  программах
              обработки  событий  и  позволяет Вам установить маски
              команд. Например,   методы   TView:   EnableCommands,
              DisableCommands, GetCommands       и      SetCommands
              используют аргументы  типа   TCommandSet.   Множество
              команд   может  быть  объявлено  и  инициализировано,
              используя синтаксис Паскаля:

      CurCommandSet: TCommandSet = [0..255] - [cmZoom, cmClose,
                                   cmResize, cmNext];

  См. также  cmXXXX, TView.DisableCommands, TView.EnableCommands,
             TView.GetCommands, TView.SetCommands.


#Тип TDrawBuffer
Тип TDrawBuffer                                             Views
═════════════════════════════════════════════════════════════════
  Объявление  TDrawBuffer = array[0..MaxViewWidth-1] of Word;

  Функция     Тип TDrawBuffer  используется  для объявления буферов
              для методов Draw различных видимых  элементов. Обычно
              данные и  атрибуты сохраняются и форматируются строка
              за строкой в TDrawBuffer, а затем выводятся на экран:

          var
            B: TDrawBuffer;
          begin
            MoveChar(B, ' ', GetColor(1), Size.X);
            WriteLine(0, 0, Size.X, Size.Y, B);
          end;

  См. также  TView.Draw, MoveBuf, MoveChar, MoveCStr, MoveStr.


#Тип TEvent
Тип TEvent                                                Drivers
═════════════════════════════════════════════════════════════════
  Объявление  TEvent = record
                What: Word;
                  case Word of
                    evNothing: ();
                    evMouse: (
                      Buttons: Byte;
                      Double: Boolean;
                      Where: TPoint);
                    evKeyDown: (
                      case Integer of
                        O: (KeyCode: Word);
                        1: (CharCode: Byte);
                    evMessage: (
                      Command: Word;
                      case Word of
                        0: (InfoPtr: Pointer);
                        1: (InfoLong: Longint);
                        2: (InfoWord: Word);
                        3: (InfoInt: Integer);
                        4: (InfoByte: Byte);
                        5: (InfoChar: Char);
              end;

  Функция     Тип записи с вариантами TEvent играет фундаментальную
              роль в стратегии управления событиями в Turbo Vision.
              Внешние события, такие как события от клавиатуры и от
              мышки и события-команды, генерируемые взаимодействием
              видимых элементов,  сохраняются  и   передаются   как
              записи TEvent.

  См. также evXXXX,  HandleEvent методы, GetKeyEvent, GetMouseEvent


#Тип TItemList
Тип TItemList                                             Objects
═════════════════════════════════════════════════════════════════
  Объявление  TItemList  =  array[0..MaxCollectionSize  -  1]  of
                           Pointer;

  Функция     Массив общих   указателей   используется    внутренне
              объектами TCollection.


#Тип TMenu
Тип TMenu                                                   Menus
═════════════════════════════════════════════════════════════════
  Объявление  TMenu = record
                Items: PMenuItem;
                Default: PMenuItem);
              end;

  Функция     Тип TMenu представляет один уровень дерева меню. Поле
              Items указывает на список TMenuItems и  поле  Default
              указывает на умалчиваемый элемент внутри этого списка
              (элемент выбирается по умолчанию при  открытии  этого
              меню). Объект  TMenuView (потомками которого являются
              TMenuBar и  TMenuBox)  имеет   поле   Menu,   которое
              указывает на   TMenu.   Записи   TMenu   создаются  и
              удаляются с помощью подпрограмм NewMenu и DisposeMenu.


  См. также    TMebuView,    TMenuItem,    NewMenu,    DisposeMenu,
               TMenuView.Menu поля


#Тип TMenuItem
Тип TMenuItem                                               Menus
═════════════════════════════════════════════════════════════════
  Объявление  TMenuItem = record
                Next: PMenuItem;
                Name: PString;
                Command: Word;
                Disabled: Boolean;
                KeyCode: Word;
                HelpCtx: Word;
                case Integer of
                  0: (Param: PString);
                  1: (SubMenu: PMenu);
                end;
              end;

  Функция     Тип TMenuItem  представляет  элемент  меню,   который
              может быть    обычным    элементом,    подменю    или
              строкой-разделителем. Next  указывает  на   следующий
              TMenuItem в  списке  элементов  меню,  или равен nil,
              если это последний элемент. Name указывает на строку,
              содержащую имя  элемента  меню  или  равен nil,  если
              элемент меню является  строкой-разделителем.  Command
              содержит событие-команду        (см.        константы
              cmXXXX) генерируемую при выборе элементов меню или 0,
              если элемент меню  представляет  подменю.  Disable  -
              True,  если элемент меню запрещен, False, в противном
              случае.  KeyCode содержит  скан-код  горячей  клавиши
              связанной  с элементом меню или 0,  если элемент меню
              не имеет  горячей  клавиши.  HelpCtx  содержит  номер
              контекстной   подсказки   элемента   меню   (значение
              hcNoContext указывает,  что  элемент  меню  не  имеет
              контекстной   подсказки).   Если  элемент - меню  это
              обычный элемент, Param содержит указатель на параметр
              строки  (отображаемый  справа от элемента в TMenuBox)
              или nil, если элемент не имеет параметра строки. Если
              элемент  меню - это  подменю,  Submenu  указывает  на
              структуру   подменю.   Записи   TMenuItem   создаются
              использованием функций NewItem, NewLine и NewSubmenu.

  См. также    TMenu, TMebuView, NewItem, NewLine, NewSubMenu


#Тип TMenuStr
Тип TMenuStr                                                Menus
═════════════════════════════════════════════════════════════════
  Объявление  TMenuStr = string[31];

  Функция     Тип строки,   используемый   NewItem   и  NewSubMenu.
              Максимальный размер  заголовка  элемента  меню  -  31
              символ.

  См. также   NewItem, NewSubMenu


#Тип TPalette
Тип TPalette                                                Views
═════════════════════════════════════════════════════════════════
  Объявление  TPalette = String;

  Функция     Тип строки,  используемый для объявления палитр Turbo
              Vision.

  См. также   GetPalette методы


#Тип TScrollChars
Тип TScrollChars                                            Views
═════════════════════════════════════════════════════════════════
  Объявление  TScrollChars = array[0..4] of Char;

  Функция     Массив, представляющий   символы,   используемые  для
              рисования TScrollBar.

  См. также   TScrollBar


#Тип TSItem
Тип TSItem                                                Dialogs
═════════════════════════════════════════════════════════════════
  Объявление  TSItem = record
                Value: PString;
                Next: PSItem;
              end;

  Функция     Тип записи TSItem обеспечивает односвязный  список из
              PString. Подобные списки могут быть полезны во многих
              программах на Turbo Vision,  где не требуется  полная
              гибкость коллекций  строк (см.  TCluster,  например).
              Функция NewSItem предназначена для добавления записей
              в список TSItem.



#Тип TStatusDef
Тип TStatusDef                                              Menus
═════════════════════════════════════════════════════════════════
  Объявление  TStatusDef = record
                Next: PStatusDef;
                Min, Max: Word;
                Items: PStatusItem;
              end;

  Функция     Тип TStatusDef   представляет   определение    строки
              статуса. Поле  Next указывает на следующий TStatusDef
              в списке строк статуса или nil,  если  это  последняя
              строка статуса.   Min   и   Max  определяют  диапазон
              контекста подсказки,  который  соответствует   строке
              статуса. Items  указывает  на список элементов строки
              статуса или nil, если в строке статуса нет элементов.
              Объект TStatusLine (строка статуса)  имеет  указатель
              на   список   записей   TStatusDef   и  будет  всегда
              отображать первую строку статуса, для которой текущая
              контекстная подсказка находится внутри  диапазона Min
              и   Max.   Программа   Turbo   Vision   автоматически
              корректирует      строку       статуса,       вызывая
              TStatusLine.Update     из    TProgram.Idle.    Записи
              TStatusDef    создаются    использованием     функции
              NewStatusDef.

  См. также   TStatusLine, TProgram.Idle, функция NewStatusDef


#Тип TStatusItem
Тип TStatusItem                                             Menus
═════════════════════════════════════════════════════════════════
  Объявление  TStatusITEm = record
                Next: PStatusItem;
                Text: PString;
                KeyCode: Word;
                Command: Word;
              end;

  Функция     Тип TStatusItem  представляет элемент строки статуса,
              который может быть видим или невидим.  Next указывает
              на следующий  TStatusItem  в  списке элементов строки
              статуса или nil,  если это  последний  элемент.  Text
              указывает на   строку,  содержащую  надпись  элемента
              статуса (такую  как  'Alt-X  Exit')  или  nil,   если
              элемент статуса   невидим  (в  таком  случае  элемент
              служит только  для  определения   горячей   клавиши).
              KeyCode содержит скан-код горячей клавиши связанной с
              элементом статуса или  0,  если  элемент  статуса  не
              имеет горячей      клавиши.      Command     содержит
              команду-событие (см.  константы  cmXXX)  генерируемую
              при выборе элемента статуса.
              Функция записи TStatusItem не  только  в  определении
              визуализации  строки статуса,  она также используется
              для определения    горячей    клавиши,    чьи    коды
              автоматически отображаются в команды. Метод TProgram.
              GetEvent вызывает  TStatusLine.HandleEvent  для  всех
              событий evKeyDown.  TStatusLine.HandleEvent сканирует
              текущую строку статуса на элементы, содержащие данный
              код клавиши   и,   если   один   из  них  найден,  он
              преобразует это событие evKeyDown в событие evCommand
              со значением Command данным в TStatusItem.
              Записи TStatusItem создаются  использованием  функции
              NewStatusKey.


  См. также   TStatusLine, NewStatusKey, TStatusLine.HandleEvent


#Тип TStreamRec
Тип TStreamRec                                            Objects
═════════════════════════════════════════════════════════════════
  Объявление  TStreamRec = ^TStreamRec;
                TStreamRec = record
                  ObjType: Word;
                  VmLink: Word;
                  Load: Pointer;
                  Store: Pointer;
                  Next: Word;
                end;

  Функция     Тип объекта Turbo Vision должен  быть зарегистрирован
              TStreamRec, до его загрузки или сохранения на объекте
              TStream. Подпрограмма RegisterTypes  регистрирует тип
              объекта записью TStreamRec.

              Поля в регистрационной записи потока определены:

                 Таблица 14.33. Поля записи потока.

     ──────────────────────────────────────────────────────────────
     Поле      Содержимое
     ──────────────────────────────────────────────────────────────
     ObjType   Уникальный числовой идентификатор для типа объекта
     VmtLine   Связь типа объекта с элементом VMT
     Load      Указатель на констрактор Load объектного типа
     Store     Указатель на метод Store объектного типа
     Next      Указатель на следующую TStreamRec
     ──────────────────────────────────────────────────────────────

              Turbo Vision  резервирует  значения   идентификаторов
              объектных типов   от   0   до   999  для  внутреннего
              использования. Программист  может   определить   свои
              значения в диапазоне от 1,000 до 65,535.
              По соглашению,  tStreamRec  для  типа  объекта  Txxxx
              называется Rxxxx.   Например,   TStreamRec  для  типа
              TCalculator называется RCalculator,  как  показано  в
              следующем коде:

              type
                TCalculator = object(TDialog)
                  constructor Load(var S: TStream);
                  procedure Store(var S: TStream);
                  ...
                end;

              const
                RCalculator: TStreamRec = (
                  ObjType: 2099;
                  VmtLink: Ofs(TypeOf(TCalculator)^);
                  Load: @TCalculator.Load;
                  Store: @TCalculator.Store);

              begin
                RegisterType(RCalculator);
                ...
              end;

  См. также   RegisterType


#Тип TStrIndex
Тип TStrIndex                                             Objects
═════════════════════════════════════════════════════════════════
  Объявление  TStrIndex = array[0..9999] of TStrIndexRec;

  Функция     Используется внутренне TStringList и TStrListmaker.


#Тип TStrIndexRec
Тип TStrIndexRec                                          Objects
═════════════════════════════════════════════════════════════════
  Объявление  TStrIndexRec = record
                Key, Count, Offset: Word;
              end;

  Функция     Используется внутренне TStringList и TStrListmaker.



#Тип TSysErrorFunc
Тип TSysErrorFunc                                         Drivers
═════════════════════════════════════════════════════════════════
  Объявление  TSysErrorFunc  =  function(ErrorCode: Integer; Drive:
                                         Byte): Integer;

  Функция     Определяет тип   и   функцию   обработчика  системной
              ошибки.

  См. также   SysErrorFunc, SystemError, InitSysError, DoneSysError


#Тип TTerminalBuffer
Тип TTerminalBuffer                                      TextView
═════════════════════════════════════════════════════════════════
  Объявление  TTerminalBuffer = array[0..65519] of Char;

  Функция     Используется внутренне TTerminal.

  См. также   TTerminal



#Тип TTitleStr
Тип TTitleStr                                               Views
═════════════════════════════════════════════════════════════════
  Объявление  TTitleStr = string[80];

  Функция     Используется для    объявления   строк   текста   для
              заголовков окон.

  См. также   TWindow.Title


#Тип TVideoBuf
Тип TVideoBuf                                               Views
═════════════════════════════════════════════════════════════════
  Объявление  TVideoBuf = array[0..3999] of Word;

  Функция     Используется для объявления видеобуферов.

  См. также   TGroup.Buffer


#Тип TWordArray
Тип TWordArray                                            Objects
═════════════════════════════════════════════════════════════════
  Объявление  TWordArray = array[0..16383] of Word;

  Функция     Тип массива слов для общего использования.


#Константы wfXXXX
Константы wfXXXX                                            Views
═════════════════════════════════════════════════════════════════
  Функция     Эти мнемоники  определяют  биты в поле Flags объектов
              TWindow. Если  биты  установлены,  окно  будет  иметь
              соответствующие атрибуты:  окно  может  перемещаться,
              изменять размер, закрываться или масштабироваться.

  Значения    Флаги окна определены так:

                  ┌ TWindow.Flags ┐
                  │               │
                  msb           lsb
                  ╔═╤═╤═╤═╤═╤═╤═╤═╗
                  ╚╤╧═╧═╧╤╧╤╧╤╧╤╧╤╝
                   └──┬──┘ │ │ │ └─ wfMove  = $01
                      │    │ │ └─── wfGrow  = $02
               Неопределены│ └───── wfClose = $04
                           └─────── wfZoom  = $08

               Таблица 14.34. Константы флагов окна.

──────────────────────────────────────────────────────────────────
 Константа Значение Назначение
──────────────────────────────────────────────────────────────────
 wfMove    $01   Окно можно перемещать
 wfGrow    $02   Можно изменять размеры окна соответствующей
                 кнопкой в левом правом углу
 wfClose   $04   Рамка окна имеет закрывающую кнопку
 wfZoom    $08   Рамка окна имеет кнопку масштабирования
──────────────────────────────────────────────────────────────────

              Если отдельный    бит   установлен,   соответствующая
              возможность подключается,  в  противном  случае,  эта
              возможность запрещена.

  См. также  TWindows.Flags


#Константa wnNoNumber
Константa wnNoNumber                                        Views
═════════════════════════════════════════════════════════════════
  Объявление  wnNoNumber = 0;

  Функция     Если поле  TWindow.Number содержит эту константу, это
              указывает, что  окно не может иметь номера и не может
              быть выбрано через Alt-номер.  Если поле Number между
              1  и 9,  номер окна отображается и выбор по Alt-номер
              доступен.

  См. также   TWindow.Number


#Тип WordRec
Тип WordRec                                               Objects
═════════════════════════════════════════════════════════════════
  Объявление  WordRec = record
                Lo, Hi: Byte;
              end;

  Функция     Утилитная запись,  позволяющая доступ  к  младшему  и
              старшему биту слова.

  См. также   LongRec


#Константы wpXXXX
Константы wpXXXX                                            Views
═════════════════════════════════════════════════════════════════
  Функция
              Эти константы  определяют  три   стандартных   цвета,
              отражая их назначение.  По умолчанию,  объект TWindow
              имеет палитру  wpBlueWindow.  По  умолчанию,   объект
              TDialog имеет палитру wpGrayWindow.


  Значения    Три стандартных палитры окна определены:

              Таблица 14.35. Стандартные палитры окна.

     ──────────────────────────────────────────────────────────────
     Константа      Значение Назначение
     ──────────────────────────────────────────────────────────────
     wpBlueWindow   0        Желтый на голубом
     wpCuanWindow   1        Синий на бирюзовом
     wpGrayWindow   2        Черный на сером
     ──────────────────────────────────────────────────────────────

  См. также  TWindow.Palette, TWindow.GetPalette
